<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QuiryRain的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://quiryrain.ml/"/>
  <updated>2021-05-07T20:40:49.374Z</updated>
  <id>https://quiryrain.ml/</id>
  
  <author>
    <name>QuiryRain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一场短暂的旅行&lt;三&gt;</title>
    <link href="https://quiryrain.ml/210508/"/>
    <id>https://quiryrain.ml/210508/</id>
    <published>2021-05-07T19:40:52.000Z</published>
    <updated>2021-05-07T20:40:49.374Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX1/Tt5pIsqUfFt0VufsNWKXEu8uKpRrLFu5cv3tx5tfpXsqWJ7yRMWltvad7w3mwli0vcKTyy6hvWzzQzOTcNi04Pch58qLhAHW0tNFzpwRUUXNhKUOum7D5T1Jgf1czxuspm2KzCzSVAjJTm2ejdg6JqA2MuCAQ//L64LcPVPtnFUhk7614lhPqaMuqUnpBsn3xx1Hi+TsXPICjggW3GLcyOsDx4UQW5bKEK3ze2of7uXqaE6mzdHIzRJRjYdn8tfOB8GNiCWPh/1WxlgLCpmsC1ECI7qIIvUsSB6HG6ObUpoG5Ohxfg4mrCHdUELDZEfjiwo34V60pFsPgtFnb6LofYKH3EfPZYpupEGde11U2M48F1MfxXAEOjA7jOyaHihh9wisQtltmK9oX1BuwVs/JIGiXbL2FMGp6joj4bEyAVvFdf9HSVQXhxTXofWLYK4X6pnECvaCqQLFFkSwISCzxOwDS1z6hsZdyHRSxHhitALdsna+tRW6LRY17WmiQq3pFLpcsb9e1dIWy4YfRMPG2pRzSH3B5OappoZqFxUFaGlqrA+YfZh5zKqM+Ec5WTjaqERQEvEYDv6dO7vnagBvzQoZUQGUSnXTamRrDdVVpf3wododckWMiqjN/V2yX4vApLv+3tCSNLiEVRCvg1gTePl2d2ZpIT94CGzyiqeE3ZO/OorRWW48F1oJ/q92mT9LklHSYZ/76Rmd8K+/p0jH5Kk4a5KX5nryEj8skrZ7M5rnr2fJSzdirQg/HY9Kh4b/sbwgpbcLAoov3Yuh5KnWoePG6UPf/nyr76tDSDzRn2dP3t6zcxfw5Rr1qef1kUEb8kJPyi1BuDuTny58zQX1kVdmp+8gKCOFmwmrd9O8fKZS9Y6qAe86Q4oTl5hyB092zxgSsCzfffKxt49p+YC6b1qDWIgLMQXfnRTceTk0t+Kttr2uSxHZq0BF0oeW6UY2eOmi7vrEhQhtkM0S01Oje/EYLbvjhnjwUxLelKrAcficdqz2jG0ndn4bh+xhxYk3xtsBg/1n7zlrHBRK7PAzBV+B/z1CWIcHh1vvfM8ITtOljPfg/sKzMFiM3gBEA6lrhYs4wuWKmOk2x+pvOdHbO2pwao3gH6AFBL9aIXvkTJCcdjZZ5yrvHsVJylPDi6uL8nm882+yMRnT/kxZ+bPA0P6vUcwNXvFsLUPomf62+T0xNJDnR1aGYURbKIUxt6h0kIbL9yJzW2b/CMvmKovJ5uIVHb+e1bg/+LBkvG3ERT4VMZzOHsl6rQmDHg9HAMZwhcGr1xKm6oQ0kEB3+OMxKAkde5eejPTPPwJv52VbxOfe3W+lFBH6ZfDmeSP06HaE4+RcpjBOdUwLWKPghSBz6tL0SUK3tN6MDSlTcRQpT8A2vxLaB12ALEECM6aemJPUA5IGd1gg99jClHontD2xJ6rT6ANucVC/rb//GOe6ItuHcI5Uiy3nt5UKhDD8WA1npsi5ImJ33rY4QaS7fMcjot6pkqutzhoDMuw4RUzQQyvNNKJjSQzT7x5CD0o6KxV66cB0QH2rk1DlN/ZlZqREtjFISnqYTE1Lo0XD+XOZ0GT2VbyXgMtYLS3SMde/vO3DvbJ4JJzMZ04lwmEA7gFCk9+q4dCZIw3l27zrNEmof4ZNahkZeqoVU0xp39mC/PXQMSnytYCsMuKUAwrXc9C0rN62rcocnWmtvQf5tqeHIv7bmw7NfLAb024J1NStduSITG7b2ndWOIhTtyUmRRagXbSpmXyBBIHwdPx3WsKIYUeO/Z+WAkJPdp1JaLEmxebEvP+oqCKC8iI5zPOq5ctQlBzkeaF+U4wnbZQvProwXRmVvHkPyCmAiKmj/eJn42MajEEF8lr9ahyYKrKIMXkQFEiZFK+i9vQbHwhky9VCO+fzz8KAu3x4qALKzuByRFn6KQdV7cX2B9J8XO8i3dgL3wj1D8KRV51ENSSYNavdj29feMqsB+l9+GDU9SfZr5D9jLbbIfdcSpFFMknWnhbkPS7gf6ToEk7dmP5roGfie+Di+tMTqyfN/Vch/qM+imXj21eq7hpKp05v1gAnjgO2wZExpDsX6WKL3unM7xclAaW5igByc9Q8s4CPaw8beY+XI9ZldK2OA3zW+p8vuC/AYHRTaxLWWpgmsZ4PZzY29Juhx4aL5aWQssWbxv6SZhHvq792uFS5SsJGb1D6/ZeqvaYs0ITTo2YxpFm8sK+uTpGwci82yoI8MszqlB9DYUQuZ2/teoFHcodUNAX4b0NU7ZuOs2YdDBv4MPFvFEnk0gECFdmzj8nj/HT7kcvgfWRBJ56bIYre4I+Zpx6DBiTH9JQov4XbUhNVONhsxV6kYesho1dEJOB7/LeoBNcddSyIasD3MbZAdvq/jwCxhKCXt6QE3US4wcalVh4vXvn0720DTOgB0ND/yoEESEM8+0YKX5Xzi2mvAPGZ6Ww+kELPSrYbC2AILnIc72fjfQiqsTtFqbPiS2F4yJWCftFt8GOIc+jlajwekgYjx6GedZmWMoiy3B//DEU1Su6zVFReA4KCcx35VRTIlPnrcsIrn2zaB/Fr+D5lfTeypARW2uPfBX4VUcXqZZfYGVEqvZNI2iQaWtUG0mMMZ2wzSpTwXtdGx6eYiGsa9PxEleu99YvE3ViApBefQkzX4TmcNqoRncfToSEiOtnhSNeImLp5DySyJ8/XbvG7l8YLRJoR8UQFHrEV15c5xMALtru/5/EPx4h3D9QZDAjtrqnOUQasYTuFqoC4B/Eq/y57BzAGVukDXd6hnGt1G0nxrFZ3r2So1NqKV6WI+Bea2Ii9VdrOj6na+luCcPmybcHc50yyAy73bRZIOmjci9Ozq05qwBNETRoJMQ1PjZwix24yWb+J77Lchmq5OjRKRsRrl34u8U16NctarajCQU9S66ANM33VWUMyStDjrRqEPvihcRgweoxcJfmsGRr6NlZfKggrYR+ebU6e0k0WOcgainCdYUS78dJoPZUdugUxTerhmpo1rxt4HV0j0Aq80VtdIixQZfhuD8xj6rBe7Batp3brv2+r7XCxN8zhVtynNV0xtYtc4vKZfC3YU4Tc/0MiYSLewmWHSr9eGsT7r5nK6rxbPm/LFFXuWcqhMq+Uxnjg3vFYPX0MVrGqte3AKVg/zlmYxzj2RuUkwFedc8PQqa9BJUyJRuu44yem/JxZCCeow67eKcGOErdZGaYHp1scuCo7ybqtCPDGW8NMCpfe5CWb0uQwzPa1jpNHt7l9c5nw+TPmkWymWkEvXaLpuEqLVDivjjcBuhM7RDP4XJYtZ37lrEuKfB4aejJSMniNjHeCjMRc+Q3rhZBCnZcJv7voUEamyqw+ZYp7PUx1udzVOv6rP+V5kZV806N4FOdWi+pC7sU5DMXg+TkxF1q1WTUQDRNwLEHhDtQtob1MVLMXLn+CO9PyPXOBcMu6AP0HD</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生路上总有一些人要走，可能有些人的离开本来就是提前预设好的。&lt;/p&gt;
    
    </summary>
    
      <category term="个人心情" scheme="https://quiryrain.ml/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E6%83%85/"/>
    
    
      <category term="工作" scheme="https://quiryrain.ml/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="压力" scheme="https://quiryrain.ml/tags/%E5%8E%8B%E5%8A%9B/"/>
    
      <category term="情感" scheme="https://quiryrain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>一场短暂的旅行&lt;二&gt;</title>
    <link href="https://quiryrain.ml/210503/"/>
    <id>https://quiryrain.ml/210503/</id>
    <published>2021-05-03T11:33:41.000Z</published>
    <updated>2021-05-03T12:22:10.965Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">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</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间总是匆匆而过，对于流浪的人而言，总是要回家的。&lt;/p&gt;
    
    </summary>
    
      <category term="个人心情" scheme="https://quiryrain.ml/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E6%83%85/"/>
    
    
      <category term="工作" scheme="https://quiryrain.ml/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="压力" scheme="https://quiryrain.ml/tags/%E5%8E%8B%E5%8A%9B/"/>
    
      <category term="情感" scheme="https://quiryrain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>一场短暂的旅行RR（ryy）</title>
    <link href="https://quiryrain.ml/210502/"/>
    <id>https://quiryrain.ml/210502/</id>
    <published>2021-05-02T13:24:08.000Z</published>
    <updated>2021-05-07T20:02:53.111Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">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</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇很悲伤的诗，对我而言，没有远方的诗只是一场徒劳的旅行。&lt;/p&gt;
    
    </summary>
    
      <category term="个人心情" scheme="https://quiryrain.ml/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E6%83%85/"/>
    
    
      <category term="工作" scheme="https://quiryrain.ml/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="压力" scheme="https://quiryrain.ml/tags/%E5%8E%8B%E5%8A%9B/"/>
    
      <category term="情感" scheme="https://quiryrain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Flask学习之路</title>
    <link href="https://quiryrain.ml/200720/"/>
    <id>https://quiryrain.ml/200720/</id>
    <published>2020-07-19T15:54:26.000Z</published>
    <updated>2020-07-24T00:20:49.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>线程是可单独管理的最小指令集</p></blockquote><table><thead><tr><th align="left">变量名</th><th align="left">上下文</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">current_app</td><td align="left">程序上下文</td><td align="left">当前激活程序的程序实例</td></tr><tr><td align="left">g</td><td align="left">程序上下文</td><td align="left">处理请求时用作临时存储的对象。每次请求都会重设</td></tr><tr><td align="left">request</td><td align="left">请求上下文</td><td align="left">请求对象，封装了客户端发出的http请求中的内容</td></tr><tr><td align="left">session</td><td align="left">请求上下文</td><td align="left">用户会话，用于存储请求之间需要“记住”的值的字典</td></tr></tbody></table><p>Flask 在分发请求之前激活（或推送）程序和请求上下文，请求处理完成后再将其删除。</p><a id="more"></a><h3 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">请求页面，并返回页面内容</td></tr><tr><td align="left">HEAD</td><td align="left">类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td align="left">POST</td><td align="left">大多用于提交表单或上传文件，数据包含在请求体中</td></tr></tbody></table><h3 id="常见的错误代码及错误原因"><a href="#常见的错误代码及错误原因" class="headerlink" title="常见的错误代码及错误原因"></a>常见的错误代码及错误原因</h3><table><thead><tr><th align="left">状态码</th><th align="left">说明</th><th align="left">详情</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">继续</td><td align="left">请求者应当继续提出请求。服务器已经收到请求的部分内容，正在等待其余部分</td></tr><tr><td align="left">101</td><td align="left">切换协议</td><td align="left">请求者已要求服务器切换协议，服务器已确认并准备切换</td></tr><tr><td align="left">200</td><td align="left">成功</td><td align="left">服务器已成功处理了请求</td></tr><tr><td align="left">201</td><td align="left">已创建</td><td align="left">请求成功并企鹅服务器创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">已接受</td><td align="left">服务器已接受请求，但尚未处理</td></tr><tr><td align="left">203</td><td align="left">非授权信息</td><td align="left">服务器已成功处理了请求，但返回的信息可能来自另个源</td></tr><tr><td align="left">204</td><td align="left">无内容</td><td align="left">服务器成功处理了请求，但没有返回任何内容</td></tr><tr><td align="left">205</td><td align="left">重置内容</td><td align="left">服务器成功处理了请求，内容被重置</td></tr><tr><td align="left">206</td><td align="left">部分内容</td><td align="left">服务器成功处理部分请求</td></tr><tr><td align="left">300</td><td align="left">多种选择</td><td align="left">针对请求，服务器可执行多种操作</td></tr><tr><td align="left">301</td><td align="left">永久移动</td><td align="left">请求的网页已永久移动到新位置，即永久重定向</td></tr><tr><td align="left">302</td><td align="left">临时移动</td><td align="left">请求的页面暂时跳转到其他页面，即暂时重定向</td></tr><tr><td align="left">303</td><td align="left">查看其他位置</td><td align="left">如果原来的请求是POST，重定向目标文档应该通过GET提取</td></tr><tr><td align="left">304</td><td align="left">未修改</td><td align="left">此次请求返回的页面未修改，继续使用上次的资源</td></tr><tr><td align="left">305</td><td align="left">使用代理</td><td align="left">请求者应该使用代理访问该网页</td></tr><tr><td align="left">307</td><td align="left">临时重定向</td><td align="left">请求的资源临时从其他位置响应</td></tr><tr><td align="left">400</td><td align="left">错误请求</td><td align="left">服务器无法解析该请求</td></tr><tr><td align="left">401</td><td align="left">未授权</td><td align="left">请求没有进行身份验证或验证未通过</td></tr><tr><td align="left">403</td><td align="left">禁止访问</td><td align="left">服务器拒绝此请求</td></tr><tr><td align="left">404</td><td align="left">未找到</td><td align="left">服务器找不到请求的网页</td></tr><tr><td align="left">405</td><td align="left">方法禁用</td><td align="left">服务器禁用了请求中指定的方法</td></tr><tr><td align="left">406</td><td align="left">不接受</td><td align="left">无法使用请求的内容响应请求的网页</td></tr><tr><td align="left">407</td><td align="left">需要代理授权</td><td align="left">请求者需要使用代理授权</td></tr><tr><td align="left">408</td><td align="left">请求超时</td><td align="left">服务器请求超时</td></tr><tr><td align="left">409</td><td align="left">冲突</td><td align="left">服务器在完成请求时发生冲突</td></tr><tr><td align="left">410</td><td align="left">已删除</td><td align="left">请求的资源已永久删除</td></tr><tr><td align="left">411</td><td align="left">需要有效长度</td><td align="left">服务器不接受不包含有效内容长度标头字段的请求</td></tr><tr><td align="left">412</td><td align="left">未满足前提条件</td><td align="left">服务器未满足请求者在请求中设置的其中一个前提条件</td></tr><tr><td align="left">413</td><td align="left">请求实体过大</td><td align="left">请求实体过大，超出服务器的处理能力</td></tr><tr><td align="left">414</td><td align="left">请求URI过长</td><td align="left">请求网址过长，服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">不支持类型</td><td align="left">请求格式不被请求页面支持</td></tr><tr><td align="left">416</td><td align="left">请求范围不符</td><td align="left">页面无法提供请求的范围</td></tr><tr><td align="left">417</td><td align="left">未满足期望值</td><td align="left">服务器未满足期望请求标头字段的要求</td></tr><tr><td align="left">500</td><td align="left">服务器内部错误</td><td align="left">服务器遇到错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">未实现</td><td align="left">服务器不具备完成请求的功能</td></tr><tr><td align="left">502</td><td align="left">错误网关</td><td align="left">服务器作为网关或代理，从上游服务器收到无效响应</td></tr><tr><td align="left">503</td><td align="left">服务不可用</td><td align="left">服务器目前无法使用</td></tr><tr><td align="left">504</td><td align="left">网管超时</td><td align="left">服务器作为网关或代理，但是没有及时从上游服务器收到请求</td></tr><tr><td align="left">505</td><td align="left">HTTP版本不支持</td><td align="left">服务器不支持请求中所用的HTTP协议版本</td></tr></tbody></table><h3 id="常用的匹配规则"><a href="#常用的匹配规则" class="headerlink" title="常用的匹配规则"></a>常用的匹配规则</h3><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\w</td><td align="left">匹配字母、数字及下划线</td></tr><tr><td align="left">\W</td><td align="left">匹配不是字母、数字及下划线的字符</td></tr><tr><td align="left">\s</td><td align="left">匹配任意空白字符，等价于[\t\n\r\f]</td></tr><tr><td align="left">\S</td><td align="left">匹配任意非空白字符</td></tr><tr><td align="left">\d</td><td align="left">匹配任意数字，等价于[0-9]</td></tr><tr><td align="left">\D</td><td align="left">匹配任意非数字的字符</td></tr><tr><td align="left">\A</td><td align="left">匹配字符串开头</td></tr><tr><td align="left">\Z</td><td align="left">匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td></tr><tr><td align="left">\z</td><td align="left">匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td align="left">\G</td><td align="left">匹配最后匹配完成的位置</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符</td></tr><tr><td align="left">^</td><td align="left">匹配一行字符串的开头</td></tr><tr><td align="left">$</td><td align="left">匹配一行字符串的结尾</td></tr><tr><td align="left">.</td><td align="left">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td align="left">[…]</td><td align="left">用来表示一组字符，单独列出，比如[amk]匹配a、m或k</td></tr><tr><td align="left">[^…]</td><td align="left">不在[]中的字符，比如[^abc]匹配除了a、b、c之外的字符</td></tr><tr><td align="left">*</td><td align="left">匹配0个或多个表达式</td></tr><tr><td align="left">+</td><td align="left">匹配1个或多个表达式</td></tr><tr><td align="left">?</td><td align="left">匹配0个或1个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td align="left">{n}</td><td align="left">精确匹配n个前面的表达式</td></tr><tr><td align="left">{n, m}</td><td align="left">匹配n到m次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td align="left">a|b</td><td align="left">匹配a或b</td></tr><tr><td align="left">()</td><td align="left">匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h3 id="Python中的正则修饰符"><a href="#Python中的正则修饰符" class="headerlink" title="Python中的正则修饰符"></a>Python中的正则修饰符</h3><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left">re.L</td><td align="left">做本地化识别(locale-aware)匹配</td></tr><tr><td align="left">re.M</td><td align="left">多行匹配，影响<code>^</code>和<code>$</code></td></tr><tr><td align="left">re.S</td><td align="left">使<code>.</code>匹配包括换行符在内的所有字符</td></tr><tr><td align="left">re.U</td><td align="left">根据Unicode字符集解析字符。影响<code>\w</code>、<code>\W</code>、<code>\b</code>和<code>\B</code></td></tr><tr><td align="left">re.X</td><td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写的更易于理解</td></tr></tbody></table><p><em>在网页匹配中，常用<code>re.S</code>和<code>re.I</code></em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;线程是可单独管理的最小指令集&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;变量名&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;上下文&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;current_app&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;程序上下文&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;当前激活程序的程序实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;g&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;程序上下文&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;处理请求时用作临时存储的对象。每次请求都会重设&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;request&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;请求上下文&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;请求对象，封装了客户端发出的http请求中的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;session&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;请求上下文&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;用户会话，用于存储请求之间需要“记住”的值的字典&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Flask 在分发请求之前激活（或推送）程序和请求上下文，请求处理完成后再将其删除。&lt;/p&gt;
    
    </summary>
    
      <category term="上下文全局变量" scheme="https://quiryrain.ml/categories/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    
    
      <category term="Flask" scheme="https://quiryrain.ml/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器</title>
    <link href="https://quiryrain.ml/20200712/"/>
    <id>https://quiryrain.ml/20200712/</id>
    <published>2020-07-12T12:41:29.000Z</published>
    <updated>2020-07-13T00:25:48.468Z</updated>
    
    <content type="html"><![CDATA[<p>“CSS” 列指示该属性是在哪个 CSS 版本中定义的。（CSS1、CSS2 还是 CSS3。）</p><a id="more"></a><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">示例说明</th><th align="left">CSS版本</th></tr></thead><tbody><tr><td align="left">.class</td><td align="left">.intro</td><td align="left">选择所有class=”intro”的元素</td><td align="left">1</td></tr><tr><td align="left">#id</td><td align="left">#firstname</td><td align="left">选择所有id=”firstname”的元素</td><td align="left">1</td></tr><tr><td align="left">*</td><td align="left">*</td><td align="left">选择所有元素</td><td align="left">2</td></tr><tr><td align="left">element</td><td align="left">p</td><td align="left">选择所有 <code>&lt;p&gt;</code> 元素</td><td align="left">1</td></tr><tr><td align="left">element,element</td><td align="left">div,p</td><td align="left">选择所有<code>&lt;div&gt;</code>元素和<code>&lt;p&gt;</code>元素</td><td align="left">1</td></tr><tr><td align="left">element element</td><td align="left">div p</td><td align="left">选择<code>&lt;div&gt;</code>元素内所有的<code>&lt;p&gt;</code>元素</td><td align="left">1</td></tr><tr><td align="left">element&gt;element</td><td align="left">div&gt;p</td><td align="left">选择所有父级是<code>&lt;div&gt;</code>元素的<code>&lt;p&gt;</code>元素</td><td align="left">2</td></tr><tr><td align="left">element+element</td><td align="left">div+p</td><td align="left">选择所有紧接着<code>&lt;div&gt;</code>元素之后的<code>&lt;p&gt;</code>元素</td><td align="left">2</td></tr><tr><td align="left">[attribute]</td><td align="left">[target]</td><td align="left">选择所有带有target属性的元素</td><td align="left">2</td></tr><tr><td align="left">[attribute=value]</td><td align="left">[target=_blank]</td><td align="left">选择所有使用<code>target=&quot;_blank&quot;</code>的元素</td><td align="left">2</td></tr><tr><td align="left">[attribute~=value]</td><td align="left">[title~=flower]</td><td align="left">选择 title 属性包含单词 “flower” 的所有元素素</td><td align="left">2</td></tr><tr><td align="left">[attribute|=language]</td><td align="left">[lang|=en]</td><td align="left">选择 lang 属性值以 “en” 开头的所有元素</td><td align="left">2</td></tr><tr><td align="left">:link</td><td align="left">a:link</td><td align="left">选择所有未访问链接</td><td align="left">1</td></tr><tr><td align="left">:visited</td><td align="left">a:visited</td><td align="left">选择所有访问过的链接</td><td align="left">1</td></tr><tr><td align="left">:active</td><td align="left">a:active</td><td align="left">选择所有活动链接</td><td align="left">1</td></tr><tr><td align="left">:hover</td><td align="left">a:hover</td><td align="left">选择鼠标指针位于其上的链接</td><td align="left">1</td></tr><tr><td align="left">:focus</td><td align="left">input:focus</td><td align="left">选择获得焦点的 input 元素</td><td align="left">2</td></tr><tr><td align="left">:first-letter</td><td align="left">p:first-letter</td><td align="left">选择每一个<code>&lt;p&gt;</code>元素的首字母</td><td align="left">1</td></tr><tr><td align="left">:first-line</td><td align="left">p:first-line</td><td align="left">选择每一个<code>&lt;p&gt;</code>元素的首行</td><td align="left">1</td></tr><tr><td align="left">:first-child</td><td align="left">p:first-child</td><td align="left">选择属于父元素的第一个子元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">2</td></tr><tr><td align="left">:before</td><td align="left">p:before</td><td align="left">在每个<code>&lt;p&gt;</code> 元素的内容之前插入内容</td><td align="left">2</td></tr><tr><td align="left">:after</td><td align="left">p:after</td><td align="left">在每个 <code>&lt;p&gt;</code> 元素的内容之后插入内容</td><td align="left">2</td></tr><tr><td align="left">:lang(language)</td><td align="left">p:lang(it)</td><td align="left">选择带有以 “it” 开头的 lang 属性值的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">2</td></tr><tr><td align="left">element1~element2</td><td align="left">p~ul</td><td align="left">选择前面有<code>&lt;p&gt;</code>元素的每个<code>&lt;ul&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">[attribute^=value]</td><td align="left">a[src^=”https”]</td><td align="left">选择其 src 属性值以 “https” 开头的每个 <code>&lt;a&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">[attribute$=value]</td><td align="left">a[src$=”.pdf”]</td><td align="left">选择其 src 属性以 “.pdf” 结尾的所有 <code>&lt;a&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">[attribute*=value]</td><td align="left">a[src*=”abc”]</td><td align="left">选择其 src 属性中包含 “abc” 子串的每个 <code>&lt;a&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:first-of-type</td><td align="left">p:first-of-type</td><td align="left">选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:last-of-type</td><td align="left">p:last-of-type</td><td align="left">选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个<code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:only-of-type</td><td align="left">p:only-of-type</td><td align="left">选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:only-child</td><td align="left">p:only-child</td><td align="left">选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:nth-child(n)</td><td align="left">p:nth-child(2)</td><td align="left">选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:nth-last-child(n)</td><td align="left">p:nth-lat-child(2)</td><td align="left">选择属于其父元素的倒数第二个子元素的每个 <code>&lt;p</code>&gt; 元素</td><td align="left">3</td></tr><tr><td align="left">:nth-of-type(n)</td><td align="left">p:nth-of-type(2)</td><td align="left">选择属于其父元素第二个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:nth-last-of-type(n)</td><td align="left">p:nth-last-of-type(2)</td><td align="left">选择属于其父元素倒数第二个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:last-child</td><td align="left">p:last-child</td><td align="left">选择属于其父元素最后一个子元素每个 <code>&lt;p&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:root</td><td align="left">:root</td><td align="left">选择文档的根元素</td><td align="left">3</td></tr><tr><td align="left">:empty</td><td align="left">p:empty</td><td align="left">选择没有子元素的每个 <code>&lt;p&gt;</code> 元素（包括文本节点）</td><td align="left">3</td></tr><tr><td align="left">:target</td><td align="left">#news:target</td><td align="left">选择当前活动的 #news 元素</td><td align="left">3</td></tr><tr><td align="left">:enabled</td><td align="left">input:enabled</td><td align="left">选择每个启用的 <code>&lt;input&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:disabled</td><td align="left">input:disabled</td><td align="left">选择每个禁用的 <code>&lt;input&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:checked</td><td align="left">input:checked</td><td align="left">选择每个被选中的 <code>&lt;input&gt;</code> 元素</td><td align="left">3</td></tr><tr><td align="left">:not(selector)</td><td align="left">:not(p)</td><td align="left">选择非<code>&lt;p&gt;</code> 元素的每个元素</td><td align="left">3</td></tr><tr><td align="left">:out-of-range</td><td align="left">:out-of-range</td><td align="left">匹配值在指定区间之外的input元素</td><td align="left">3</td></tr><tr><td align="left">:in-range</td><td align="left">:in-range</td><td align="left">匹配值在指定区间之内的input元素</td><td align="left">3</td></tr><tr><td align="left">:read-write</td><td align="left">:read-write</td><td align="left">用于匹配可读及可写的元素</td><td align="left">3</td></tr><tr><td align="left">:read-only</td><td align="left">:read-only</td><td align="left">用于配置只读属性的元素</td><td align="left">3</td></tr><tr><td align="left">:optional</td><td align="left">:optional</td><td align="left">用于匹配可选的输入元素</td><td align="left">3</td></tr><tr><td align="left">:required</td><td align="left">:required</td><td align="left">用于匹配设置了<code>required</code>属性的元素</td><td align="left">3</td></tr><tr><td align="left">:valid</td><td align="left">:valid</td><td align="left">用于匹配输入值为合法的元素</td><td align="left">3</td></tr><tr><td align="left">:invalid</td><td align="left">:invalid</td><td align="left">用于匹配输入值为非法的元素</td><td align="left">3</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“CSS” 列指示该属性是在哪个 CSS 版本中定义的。（CSS1、CSS2 还是 CSS3。）&lt;/p&gt;
    
    </summary>
    
      <category term="lxml" scheme="https://quiryrain.ml/categories/lxml/"/>
    
    
      <category term="lxml" scheme="https://quiryrain.ml/tags/lxml/"/>
    
      <category term="CSS" scheme="https://quiryrain.ml/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Pip 更新所有包</title>
    <link href="https://quiryrain.ml/20200412/"/>
    <id>https://quiryrain.ml/20200412/</id>
    <published>2020-04-12T09:21:53.000Z</published>
    <updated>2020-04-12T09:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看可更新包：</span><br><span class="line">pip list  --outdated --format=columns</span><br><span class="line">批量下载并更新：</span><br><span class="line">pip install pip-review</span><br><span class="line">pip-review --local --interactive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python后端" scheme="https://quiryrain.ml/categories/Python%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Pip" scheme="https://quiryrain.ml/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>Mac中使用Navicat Premium</title>
    <link href="https://quiryrain.ml/191217/"/>
    <id>https://quiryrain.ml/191217/</id>
    <published>2019-12-17T03:04:14.000Z</published>
    <updated>2019-12-17T23:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="给一个飞机链接"><a href="#给一个飞机链接" class="headerlink" title="给一个飞机链接"></a>给一个飞机链接</h3><p>链接1：<a href="https://linan.blog/2019/Navicat-Premium2/" target="_blank" rel="noopener">起飞</a><br>链接2：<a href="https://hacpai.com/article/1571890862655" target="_blank" rel="noopener">起飞</a></p><h3 id="Navicat-Keygen"><a href="#Navicat-Keygen" class="headerlink" title="Navicat Keygen"></a>Navicat Keygen</h3><p>由于原文的中的navicat-keygen无法使用了，可以采用以下的一个，效果相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;kervin521&#x2F;navicat-keygen</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;给一个飞机链接&quot;&gt;&lt;a href=&quot;#给一个飞机链接&quot; class=&quot;headerlink&quot; title=&quot;给一个飞机链接&quot;&gt;&lt;/a&gt;给一个飞机链接&lt;/h3&gt;&lt;p&gt;链接1：&lt;a href=&quot;https://linan.blog/2019/Navicat-Premi
      
    
    </summary>
    
      <category term="激活" scheme="https://quiryrain.ml/categories/%E6%BF%80%E6%B4%BB/"/>
    
    
      <category term="Mac" scheme="https://quiryrain.ml/tags/Mac/"/>
    
      <category term="破解" scheme="https://quiryrain.ml/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>通过图像像素值对图像进行降噪处理</title>
    <link href="https://quiryrain.ml/191028/"/>
    <id>https://quiryrain.ml/191028/</id>
    <published>2019-10-28T04:53:58.000Z</published>
    <updated>2020-07-14T00:14:58.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何更好获取图像的像素值"><a href="#如何更好获取图像的像素值" class="headerlink" title="如何更好获取图像的像素值"></a>如何更好获取图像的像素值</h3><p>对于一张彩色的验证码，肯定少不了RBG三通道或者是RGBA四通道，其中在四通道的图像中，是在原来的基础上加上了alpha通道，即透明度。</p><p>彩色的图像虽然人为可以更好的区分，但是对于机器而言，并不能去区分。因此如何让机器进行区分这就是接下来要说明的问题。</p><p>首先，对于人而言，彩色的图像有时候是很容易区分出来的，对于机器而言，灰色或者黑白的图像才是机器容易识别的。因此，对于有颜色上区别的验证码而言，可以使用像素值过滤的方式进行降噪。当然，该方法只能解决部分，并不是通用的方法。</p><a id="more"></a><p>在开始接下来的内容之前需要先明白灰度值的计算公式:<code>Gray = R*0.299 + G*0.587 + B*0.114</code>，该公式为一个心理公式。</p><p>之后对于黑白图像，在图像中0表示黑色，255表示白色。</p><h3 id="图像降噪处理之图像灰度化转换"><a href="#图像降噪处理之图像灰度化转换" class="headerlink" title="图像降噪处理之图像灰度化转换"></a>图像降噪处理之图像灰度化转换</h3><p>以下代码均运行在jupyter notebook中。</p><p>开篇来张图：</p><p><img data-src="/userImages/a.jpeg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">filenames = glob.glob(<span class="string">'images/*.jpeg'</span>)</span><br><span class="line"></span><br><span class="line">filename = filenames[<span class="number">0</span>]</span><br><span class="line">img = plt.imread(filename)</span><br><span class="line"></span><br><span class="line">plt.imshow(img)</span><br></pre></td></tr></table></figure><p>对于给出的这张图片可以很明显的看出，可以根据不同的颜色进行图像降噪、去干绕线。</p><p>首先需要将彩色图片转为灰色图片，这样才能保证多通道的数据图像变成单通道的数据图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb2gray</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(img[...,:<span class="number">3</span>], [<span class="number">0.299</span>, <span class="number">0.587</span>, <span class="number">0.114</span>])</span><br><span class="line"></span><br><span class="line">gray = rgb2gray(img)</span><br><span class="line"></span><br><span class="line">plt.imshow(gray, cmap = plt.get_cmap(<span class="string">'gray'</span>))</span><br></pre></td></tr></table></figure><p><img data-src="/userImages/a_gray.png"></p><p>在将图像转化为灰度图像之后，就可以很明显的看出，图像的像素值由原来的三通道变成了单通道数据。</p><p><img data-src="/userImages/2019-10-28-00.png"></p><h3 id="图像降噪处理之灰度图像像素值平均值"><a href="#图像降噪处理之灰度图像像素值平均值" class="headerlink" title="图像降噪处理之灰度图像像素值平均值"></a>图像降噪处理之灰度图像像素值平均值</h3><p>平均值，是反应一组数据的最好表现。在图像像素值中，通过平均值进行过滤可以达到意想不到的效果。</p><p>如果一张图片中有很多无关紧要的干扰因素，如空白区域，可以考虑将图像的像素值进行设定到一定的范围中，这样就是这些验证码的平均像素值了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">avg_image</span><span class="params">(image, w, h)</span>:</span></span><br><span class="line">    points = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(h):</span><br><span class="line">            <span class="keyword">if</span> image[i, j] &lt; <span class="number">180</span>:</span><br><span class="line">                points.append(image[i, j])</span><br><span class="line"></span><br><span class="line">    avg_point = sum(points) // len(points)</span><br><span class="line">    <span class="keyword">return</span> avg_point</span><br><span class="line"></span><br><span class="line">w,h = gray.shape</span><br><span class="line"></span><br><span class="line">avg_point = avg_image(gray, w, h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">cgray = copy.copy(gray)</span><br></pre></td></tr></table></figure><p><img data-src="/userImages/2019-10-28-01.png"></p><h3 id="图像降噪处理之像素值的增强与削弱"><a href="#图像降噪处理之像素值的增强与削弱" class="headerlink" title="图像降噪处理之像素值的增强与削弱"></a>图像降噪处理之像素值的增强与削弱</h3><p>在此处我们规定，图像的削弱点为平均值的像素值，这样可以保证对深颜色的再次加深，浅色的再次削弱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(w):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(h):</span><br><span class="line">        r = gray[i, j] - avg_point</span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="number">1</span>:</span><br><span class="line">            cgray[i, j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> r &gt; <span class="number">0</span>:</span><br><span class="line">            cgray[i, j] = <span class="number">255</span></span><br></pre></td></tr></table></figure><p>在经过上述处理后，效果就变为</p><p><img data-src="/userImages/2019-10-30-00.png"></p><h3 id="图像降噪处理之8邻域、4邻域降噪"><a href="#图像降噪处理之8邻域、4邻域降噪" class="headerlink" title="图像降噪处理之8邻域、4邻域降噪"></a>图像降噪处理之8邻域、4邻域降噪</h3><p> <code>8邻域降噪</code> 的前提是将图片灰度化，即将彩色图像转化为灰度图像。以RGN色彩空间为例，彩色图像中每个像素的颜色由R 、G、B三个分量决定，每个分量由0到255种取值，这个一个像素点可以有一千多万种颜色变化。而灰度则是将三个分量转化成一个，使每个像素点只有0-255种取值，这样可以使后续的图像计算量变得少一些。</p><p>图片越接近白色的点像素越接近255，越接近黑色的点像素越接近0，而且验证码字符肯定是非白色的。对于其中噪点大部分都是孤立的小点的，而且字符都是串联在一起的。<code>8邻域降噪</code> 的原理就是依次遍历图中所有非白色的点，计算其周围8个点中属于非白色点的个数，如果数量小于一个固定值，那么这个点就是噪点。对于不同类型的验证码这个阈值是不同的，所以可以在程序中配置，不断尝试找到最佳的阈值  。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depoint</span><span class="params">(img, k)</span>:</span></span><br><span class="line">    pixdata = img</span><br><span class="line">    w, h = img.shape</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, h<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, w<span class="number">-1</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y - <span class="number">1</span>] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y + <span class="number">1</span>] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x - <span class="number">1</span>, y] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x + <span class="number">1</span>, y] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x - <span class="number">1</span>, y - <span class="number">1</span>] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x - <span class="number">1</span>, y + <span class="number">1</span>] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x + <span class="number">1</span>, y - <span class="number">1</span>] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x + <span class="number">1</span>, y + <span class="number">1</span>] &gt; <span class="number">254</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; k:</span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> pixdata</span><br><span class="line"></span><br><span class="line">np_img = depoint(cgray, <span class="number">8</span>)</span><br><span class="line">np_img = depoint(np_img, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img data-src="/userImages/2019-10-30-01.png"></p><p>虽然看起来效果和经过像素值削弱过的图像没有两样，这是因为，在图像经过像素值调整的时候直接将图像的像素值做了调整，如果将两者顺序进行调整，将会看到不同效果。</p><h3 id="图像降噪处理之pycapt库的使用"><a href="#图像降噪处理之pycapt库的使用" class="headerlink" title="图像降噪处理之pycapt库的使用"></a>图像降噪处理之pycapt库的使用</h3><p>之所以引用这个库，是因为在降噪的过程中，以上的方法会降噪不是很好，如上图，可以看出仍旧有两条干扰线，使用pycapt库是为了将剩余的噪音处理掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pycapt</span><br><span class="line">img = Image.fromarray(np_img.astype(<span class="string">'uint8'</span>))</span><br><span class="line">img = pycapt.dele_line(img, <span class="number">2</span>)</span><br><span class="line">img = pycapt.dele_noise(img, N=<span class="number">2</span>, Z=<span class="number">1</span>)</span><br><span class="line">img = pycapt.tran_90(img)</span><br><span class="line">img = pycapt.dele_line(img, <span class="number">2</span>)</span><br><span class="line">img = pycapt.dele_noise(img, N=<span class="number">2</span>, Z=<span class="number">1</span>)</span><br><span class="line">img = pycapt.tran_90(img)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img data-src="/userImages/2019-10-30-02.png"></p><p>处理前的效果：</p><p><img data-src="/userImages/2019-10-30-01.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>图像降噪处理有很多的方法，此处只是使用了一种大众化的方法，该方法可以解决很多有色值差的图像，但是，效果并不是很好。所以想要好的降噪后的图像，需要不断的寻找更好的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何更好获取图像的像素值&quot;&gt;&lt;a href=&quot;#如何更好获取图像的像素值&quot; class=&quot;headerlink&quot; title=&quot;如何更好获取图像的像素值&quot;&gt;&lt;/a&gt;如何更好获取图像的像素值&lt;/h3&gt;&lt;p&gt;对于一张彩色的验证码，肯定少不了RBG三通道或者是RGBA四通道，其中在四通道的图像中，是在原来的基础上加上了alpha通道，即透明度。&lt;/p&gt;
&lt;p&gt;彩色的图像虽然人为可以更好的区分，但是对于机器而言，并不能去区分。因此如何让机器进行区分这就是接下来要说明的问题。&lt;/p&gt;
&lt;p&gt;首先，对于人而言，彩色的图像有时候是很容易区分出来的，对于机器而言，灰色或者黑白的图像才是机器容易识别的。因此，对于有颜色上区别的验证码而言，可以使用像素值过滤的方式进行降噪。当然，该方法只能解决部分，并不是通用的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="图像处理" scheme="https://quiryrain.ml/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="降噪" scheme="https://quiryrain.ml/tags/%E9%99%8D%E5%99%AA/"/>
    
      <category term="像素值" scheme="https://quiryrain.ml/tags/%E5%83%8F%E7%B4%A0%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>一次完整的HTTP请求过程</title>
    <link href="https://quiryrain.ml/190724/"/>
    <id>https://quiryrain.ml/190724/</id>
    <published>2019-07-24T01:45:34.000Z</published>
    <updated>2019-07-24T01:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一次完整的HTTP请求过程"><a href="#一次完整的HTTP请求过程" class="headerlink" title="一次完整的HTTP请求过程"></a>一次完整的HTTP请求过程</h3><p>搬运来的，直接上链接吧：</p><p>链接：<a href="https://www.cnblogs.com/xuzekun/p/7527736.html" target="_blank" rel="noopener">飞机起飞</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一次完整的HTTP请求过程&quot;&gt;&lt;a href=&quot;#一次完整的HTTP请求过程&quot; class=&quot;headerlink&quot; title=&quot;一次完整的HTTP请求过程&quot;&gt;&lt;/a&gt;一次完整的HTTP请求过程&lt;/h3&gt;&lt;p&gt;搬运来的，直接上链接吧：&lt;/p&gt;
&lt;p&gt;链接：&lt;a 
      
    
    </summary>
    
      <category term="HTTP" scheme="https://quiryrain.ml/categories/HTTP/"/>
    
    
      <category term="HTTP请求过程" scheme="https://quiryrain.ml/tags/HTTP%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>动态网页数据抓取</title>
    <link href="https://quiryrain.ml/190703/"/>
    <id>https://quiryrain.ml/190703/</id>
    <published>2019-07-03T07:50:19.000Z</published>
    <updated>2020-07-14T00:14:48.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态页面数据抓取"><a href="#动态页面数据抓取" class="headerlink" title="动态页面数据抓取"></a>动态页面数据抓取</h2><h3 id="什么是AJAX"><a href="#什么是AJAX" class="headerlink" title="什么是AJAX"></a>什么是AJAX</h3><p>AJAX（Asynchronouse JavaScript And XML）异步JavaScript和XML。在后台与服务器进行少量数据换时，可以在不重新加载整个网页的情况下，利用Ajax对网页实现异步更新。在传统的网页中，如果要获取更新内容，需要重新加载整个页面。因为传统的网页数据传输格式使用的是XML语法。在Ajax加载的网页中，数据的交互使用的是JSON格式。</p><a id="more"></a><h3 id="获取ajax数据的格式"><a href="#获取ajax数据的格式" class="headerlink" title="获取ajax数据的格式"></a>获取ajax数据的格式</h3><ol><li>直接分析ajax调用的接口，然后通过代码请求接口。</li><li>使用selenium+chromedriver模拟浏览器的行为获取数据。</li></ol><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>分析接口</td><td>直接可以请求到数据，不需要做一些解析工具，代码量少，性能高。</td><td>分析接口比较复杂，特别是一些通过js混淆的接口，需要有js的功底。容易被发现是爬虫。</td></tr><tr><td>selenium</td><td>直接模拟浏览器的行为，浏览器能请求到的，使用selenium也同样可以获取。爬虫更稳定。</td><td>代码量多，性能低。</td></tr></tbody></table><h3 id="selenium-chromdriver获取动态数据"><a href="#selenium-chromdriver获取动态数据" class="headerlink" title="selenium + chromdriver获取动态数据"></a>selenium + chromdriver获取动态数据</h3><p>Selenium是一个自动化测试工具，可以在模拟人类在浏览器上的行为，自动处理浏览器上的一些行为，如点击，填充数据，删除cookie等。chromedriver是一个chrome浏览器的驱动程序。</p><p>Chromedriver：<a href="http://npm.taobao.org/mirrors/chromedriver" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver</a></p><h3 id="安装Selenium和chromedriver"><a href="#安装Selenium和chromedriver" class="headerlink" title="安装Selenium和chromedriver"></a>安装Selenium和chromedriver</h3><ol><li>安装selenium：<code>pip install selenium</code></li><li>安装chromedriver：下载完毕后，放到自己能找到的英文目录中即可。</li></ol><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>以一个例子快速开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">'./driver/chromedriver.exe'</span></span><br><span class="line">url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line">driver.get(url)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p>在运行之后会出现一个浏览器框，并自动的访问百度</p><h3 id="selenium官方文档"><a href="#selenium官方文档" class="headerlink" title="selenium官方文档"></a>selenium官方文档</h3><p><a href="https://selenium-python.readthedocs.io/index.html" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/index.html</a></p><h3 id="关闭页面"><a href="#关闭页面" class="headerlink" title="关闭页面"></a>关闭页面</h3><ol><li>driver.close()：关闭当前页面</li><li>driver.quit()：退出整个浏览器</li></ol><h3 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h3><ol><li><p><code>find_element_by_id</code>：根据id查找某个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line"><span class="comment">### 等价于</span></span><br><span class="line">submitTag = driver.find_element(By.ID, <span class="string">'su'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>find_element_by_class_name</code>：根据类名查找元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_class_name(<span class="string">'s_ipt'</span>)</span><br><span class="line"><span class="comment">### 等价于</span></span><br><span class="line">submitTag = driver.find_element(By.CLASS, <span class="string">'s_ipt'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>find_element_by_name</code>：根据name属性的值来查找元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_name(<span class="string">'email'</span>)</span><br><span class="line"><span class="comment">### 等价于</span></span><br><span class="line">submitTag = driver.find_element(By.NAME,<span class="string">'email'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>find_element_by_tag_name</code>：根据标签名来查找元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_tag_name(<span class="string">'div'</span>)</span><br><span class="line"><span class="comment">### 等价于</span></span><br><span class="line">submitTag = driver.find_element(By.TAG_NAME,<span class="string">'div'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>find_element_by_xpath</code>：根据xpath语法来获取元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_xpath(<span class="string">'//div'</span>)</span><br><span class="line"><span class="comment">### 等价于</span></span><br><span class="line">submitTag = driver.find_element(By.XPATH,<span class="string">'//div'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>find_element_by_css_selector</code>：根据css选择器选择元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_css_selector(<span class="string">'//div'</span>)</span><br><span class="line"><span class="comment">### 等价于</span></span><br><span class="line">submitTag = driver.find_element(By.CSS_SELECTOR,<span class="string">'//div'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>By</code>模块导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure></li></ol><p><em>注意</em>：<code>find_element</code>是获取第一个满足条件的元素。<code>find_elements</code>是获取所有满足条件的元素</p><h3 id="操作表单元素"><a href="#操作表单元素" class="headerlink" title="操作表单元素"></a>操作表单元素</h3><ol><li><p>在操作输入框时需要分为两步，一：找到表单元素，二：填充数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">inputTag.send_keys(<span class="string">"Python"</span>)</span><br></pre></td></tr></table></figure><p>使用clear方法可以清除输入框中的内容</p><p><code>inputTag.clear()</code></p></li><li><p>操作checkbox时，需要先选中checkbox标签，然后执行click事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rememberTag = driver.find_element_by_name(<span class="string">"rememberMe"</span>)</span><br><span class="line">rememberTag.click()</span><br></pre></td></tr></table></figure></li><li><p>选择select时，不能直接点击，因为点击后还需要选中元素。因此在selenium中专门为select标签设置了一个类<code>selenium.webdriver.support.ui.Select</code>。将获取到的元素当成参数传到这个类中，创建这个对象，之后就可以使用这个对象进行选择了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment">### 选中标签创建对象</span></span><br><span class="line">selectTag = Select(driver.find_element_by_name(<span class="string">"jumpMenu"</span>))</span><br><span class="line"><span class="comment">### 根据索引选择</span></span><br><span class="line">selectTag.select_by_index(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 根据值选择</span></span><br><span class="line">selectTag.select_by_value(<span class="string">"https://www.python.org"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 根据可视化文本选择</span></span><br><span class="line">selectTag.select_by_visible_text(<span class="string">"Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 取消选中的所有选项</span></span><br><span class="line">selectTag.deselect_all()</span><br></pre></td></tr></table></figure></li><li><p>操作按钮：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">"su"</span>)</span><br><span class="line">inputTag.click()</span><br></pre></td></tr></table></figure></li></ol><h3 id="行为链"><a href="#行为链" class="headerlink" title="行为链"></a>行为链</h3><p>有时候在页面中的操作可能要有很多步，那么这时候可以使用鼠标行为链类<code>ActionChains</code>来完成。如将鼠标移到某个元素并执行点击事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element(By.ID, <span class="string">'kw'</span>)</span><br><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line"></span><br><span class="line">actions = webdriver.ActionChains(driver)</span><br><span class="line">actions.move_to_element(inputTag)</span><br><span class="line">actions.send_keys_to_element(inputTag, <span class="string">'Python'</span>)</span><br><span class="line">actions.move_to_element(submitTag)</span><br><span class="line">actions.click(submitTag)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure><p>更多鼠标相关操作</p><ul><li>click_and_hold(element)：点击但不松开鼠标</li><li>context_click(element)：右键点击</li><li>double_click(element)：双击</li></ul><p>更多方法：<a href="https://selenium-python.readthedocs.io/api.html" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html</a></p><h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><ol><li><p>获取所有的cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></table></figure></li><li><p>根据cookie的key获取value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = driver.get_cookie(key)</span><br></pre></td></tr></table></figure></li><li><p>删除所有的cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></table></figure></li><li><p>删除某个cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_cookie(key)</span><br></pre></td></tr></table></figure></li></ol><h3 id="页面等待"><a href="#页面等待" class="headerlink" title="页面等待"></a>页面等待</h3><p>现在的网页多采用 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，在使用了WebElement时，就会抛出NullPointer的异常。为了解决这个问题。所以 Selenium 提供了两种等待方式：一种是隐式等待、一种是显式等待。</p><ul><li><p>隐式等待</p><p>调用<code>driver.implicitly_wait</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.douban.com/"</span>)</span><br></pre></td></tr></table></figure></li><li><p>显式等待</p><p>显示等待是表明某个条件成立后才执行获取元素的操作。也可以在等待的时候指定一个最大的时间，如果超过这个时间那么就抛出一个异常。显示等待应该使用<code>selenium.webdriver.support.excepted_conditions</code>期望的条件和<code>selenium.webdriver.support.ui.WebDriverWait</code>来配合完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure></li><li><p>其他的等待条件</p><ol><li><code>presence_of_element_located</code>：某个元素已经加载完毕了。</li><li><code>presence_of_all_emement_located</code>：网页中所有满足条件的元素都加载完毕了。</li><li><code>element_to_be_cliable</code>：某个元素是可以点击了。</li></ol><p>更多条件请参考：<a href="http://selenium-python.readthedocs.io/waits.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/waits.html</a></p></li></ul><h3 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h3><p>在切换页面时，<code>selenium</code>提供了一个叫做<code>switch_to_window</code>来进行切换，具体切换到哪个页面，可以从<code>driver.window_handles</code>中找到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个新的页面</span></span><br><span class="line">self.driver.execute_script(<span class="string">"window.open('"</span>+url+<span class="string">"')"</span>)</span><br><span class="line"><span class="comment"># 切换到这个新的页面中</span></span><br><span class="line">self.driver.switch_to_window(self.driver.window_handles[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">"--proxy-server=http://113.12.202.50:50327"</span>)</span><br><span class="line">driver_path = <span class="string">"./driver/chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path, options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="WebElement元素"><a href="#WebElement元素" class="headerlink" title="WebElement元素"></a>WebElement元素</h3><p><code>from selenium.webdriver.remote.webelement import WebElement</code>类是每个获取出来的元素的所属类</p><p>常用属性：</p><ol><li>get_attribute：这个标签的某个属性的值。</li><li>screentshot：获取当前页面的截图。这个方法只能在<code>driver</code>上使用。<code>driver</code>的对象类，也是继承自<code>WebElement</code>。</li></ol><h3 id="对带有页面嵌套的豆瓣进行登录"><a href="#对带有页面嵌套的豆瓣进行登录" class="headerlink" title="对带有页面嵌套的豆瓣进行登录"></a>对带有页面嵌套的豆瓣进行登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">"./driver/chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.get(<span class="string">'https://www.douban.com'</span>)</span><br><span class="line">iframe = driver.find_element_by_tag_name(<span class="string">"iframe"</span>)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br><span class="line"></span><br><span class="line">login = driver.find_element_by_class_name(<span class="string">"account-tab-account"</span>)</span><br><span class="line"></span><br><span class="line">actions = webdriver.ActionChains(driver)</span><br><span class="line">actions.move_to_element(login)</span><br><span class="line">actions.click()</span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">username = driver.find_element_by_id(<span class="string">"username"</span>)</span><br><span class="line">password = driver.find_element_by_id(<span class="string">"password"</span>)</span><br><span class="line">submit = driver.find_element_by_xpath(<span class="string">"//div[@class='account-form-field-submit ']/a"</span>)</span><br><span class="line"></span><br><span class="line">actions.move_to_element(username)</span><br><span class="line">actions.send_keys_to_element(username, <span class="string">"your username"</span>)</span><br><span class="line">actions.move_to_element(password)</span><br><span class="line">actions.send_keys_to_element(password, <span class="string">"your password"</span>)</span><br><span class="line">actions.move_to_element(submit)</span><br><span class="line">actions.click()</span><br><span class="line">actions.perform()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>注意：在使用以下内容时会出现警告信息，身为有代码洁癖的人，最不能忍受运行中出现警告信息。</p><p>警告信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: use driver.switch_to.frame instead driver.switch_to_frame(iframe)</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iframe = driver.find_element_by_tag_name(<span class="string">"iframe"</span>)</span><br><span class="line">driver.switch_to_frame(iframe)</span><br></pre></td></tr></table></figure><p>将上文改为即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iframe = driver.find_element_by_tag_name(<span class="string">"iframe"</span>)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br></pre></td></tr></table></figure><p>对框架的解决方式推荐一篇文章：<a href="https://www.cnblogs.com/dydxw/p/10551160.html" target="_blank" rel="noopener">Selenium（十二）嵌套frame定位</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态页面数据抓取&quot;&gt;&lt;a href=&quot;#动态页面数据抓取&quot; class=&quot;headerlink&quot; title=&quot;动态页面数据抓取&quot;&gt;&lt;/a&gt;动态页面数据抓取&lt;/h2&gt;&lt;h3 id=&quot;什么是AJAX&quot;&gt;&lt;a href=&quot;#什么是AJAX&quot; class=&quot;headerlink&quot; title=&quot;什么是AJAX&quot;&gt;&lt;/a&gt;什么是AJAX&lt;/h3&gt;&lt;p&gt;AJAX（Asynchronouse JavaScript And XML）异步JavaScript和XML。在后台与服务器进行少量数据换时，可以在不重新加载整个网页的情况下，利用Ajax对网页实现异步更新。在传统的网页中，如果要获取更新内容，需要重新加载整个页面。因为传统的网页数据传输格式使用的是XML语法。在Ajax加载的网页中，数据的交互使用的是JSON格式。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://quiryrain.ml/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="AJAX" scheme="https://quiryrain.ml/tags/AJAX/"/>
    
      <category term="Selenium" scheme="https://quiryrain.ml/tags/Selenium/"/>
    
      <category term="chromedriver" scheme="https://quiryrain.ml/tags/chromedriver/"/>
    
  </entry>
  
  <entry>
    <title>多线程爬虫</title>
    <link href="https://quiryrain.ml/190630/"/>
    <id>https://quiryrain.ml/190630/</id>
    <published>2019-06-30T07:33:40.000Z</published>
    <updated>2020-07-14T00:14:44.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程介绍"><a href="#多线程介绍" class="headerlink" title="多线程介绍"></a>多线程介绍</h3><p>多线程时为了同步完成多项任务，通过提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。就好比多线程是火车的每一节车厢，而进程就是火车，车厢离开火车无法启动。多线程的出现是为了提高效率。</p><a id="more"></a><h3 id="threading模块介绍"><a href="#threading模块介绍" class="headerlink" title="threading模块介绍"></a>threading模块介绍</h3><p>threading模块是python中专门提供用来多线程编程的模块。threading模块中最常用的类是Thread。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;x&#125;</span> 正在写代码"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;x&#125;</span> 正在画图"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=coding)</span><br><span class="line">    t2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure><h4 id="查看线程数"><a href="#查看线程数" class="headerlink" title="查看线程数"></a>查看线程数</h4><p>使用threading.enumerate()函数可以看到当前线程的数量</p><h4 id="查看当前线程的名字"><a href="#查看当前线程的名字" class="headerlink" title="查看当前线程的名字"></a>查看当前线程的名字</h4><p>使用threading.current_thread()函数可以看到当前线程的信息。</p><h4 id="继承自threading-Thread类"><a href="#继承自threading-Thread类" class="headerlink" title="继承自threading.Thread类"></a>继承自threading.Thread类</h4><p>为了让线程代码得到更好的封装，可以使用到threading模块下的Thread类，继承自Thread类后，然后实现run方法，线程代码会自动运行run方法中的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;threading.current_thread()&#125;</span> 正在写代码'</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;threading.current_thread()&#125;</span> 正在画图'</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = CodingThread()</span><br><span class="line">    t2 = DrawingThread()</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure><h4 id="多线程共享全局变量的问题"><a href="#多线程共享全局变量的问题" class="headerlink" title="多线程共享全局变量的问题"></a>多线程共享全局变量的问题</h4><p>多线程都是在同一个进程中运行的，因此在进程中的全局变量多有线程都是可共享的。由于线程执行的顺序是无序的，线程如果同时执行，有可能会造成数据错误。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">tickets = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tickets</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        tickets += <span class="number">1</span></span><br><span class="line">    print(<span class="string">f"tickets: <span class="subst">&#123;tickets&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=get_ticket)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h4><p>为了解决以上使用共享全局变量的问题，threading提供了一个Lock类，这个类可以在某个线程访问某个变量的时候加锁，其他线程此时无法使用，直到当前线程处理完成后，把锁释放，其他线程才能使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">tickets = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tickets</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        tickets += <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    print(<span class="string">f"tickets: <span class="subst">&#123;tickets&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=get_ticket)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>_注意_：lock锁加在修改全局变量的位置，如果只是访问全局变脸没有必要加锁。</p><h4 id="Lock生产者和消费者模式"><a href="#Lock生产者和消费者模式" class="headerlink" title="Lock生产者和消费者模式"></a>Lock生产者和消费者模式</h4><p>生产者和消费者模式是多线程开发中经常看到的一种模式。生产者的线程专门用来生产一些数据，然后存放在一个中间变量中。消费者再从这个中间变量中取出数据进行消费。但是因为要使用中间变量，中间变量由于经常是些全局变量，因此在使用的时候需要使用Lock锁来保证数据完整性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"><span class="comment"># 记录生产者生产次数，在达到10次时停止生产</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;threading.current_thread()&#125;</span> 当前存入 <span class="subst">&#123;money&#125;</span> 元，剩余 <span class="subst">&#123;gMoney&#125;</span> 元"</span>)</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gMoney &gt; money:</span><br><span class="line">                gMoney -= money</span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;threading.current_thread()&#125;</span> 取出 <span class="subst">&#123;money&#125;</span> 元，剩余 <span class="subst">&#123;gMoney&#125;</span> 元"</span>)</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> gMoney &gt;= <span class="number">10</span>:</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;threading.current_thread()&#125;</span> 想取出 <span class="subst">&#123;money&#125;</span> 元，剩余 <span class="subst">&#123;gMoney&#125;</span> 元，不足！"</span>)</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">f"消费者线程<span class="subst">&#123;x&#125;</span>"</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">f"生产者线程<span class="subst">&#123;x&#125;</span>"</span>).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="Condition生产者和消费者模式"><a href="#Condition生产者和消费者模式" class="headerlink" title="Condition生产者和消费者模式"></a>Condition生产者和消费者模式</h4><p>Lock中的生产者与消费者模式可以正常运行，但是存在一个问题，在消费者中，总是通过while死循环上锁的方式判断money的多少。由于上锁是一个很消耗CPU资源的行为，因此此方式不是最好的。还有一种更好的方式是使用threading.Condition来实现。threading.Condition可以在没有数据的时候处于阻塞等待状态。一旦有合适的数据，还可以使用notify相关的函数来通知其他处于等待状态的线程。这样就可以不用做一些无用的上锁和解锁的操作，还可以提升程序的性能。threading.Condition类似threading.Lock，可以在修改全局数据的时候进行加锁，也可以在修改完毕后解锁。以下对部分常用函数进行简单介绍：</p><ol><li>acquire：上锁</li><li>release：解锁</li><li>wait：将当前线程处于等待状态，并且释放锁。可以被其他线程使用notify和notify_all函数进行唤醒。被唤醒后会继续等待上锁，上锁后继续执行下面的代码。</li><li>notify：通知某个正在等待的线程，默认是第一个等待的线程。</li><li>notify_all：通知所有正在等待的线程。notify和notify_all不会释放锁。并且需要在release之前调用。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line"><span class="comment"># 记录生产者生产次数，在达到10次时停止生产</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                print(<span class="string">f"当前生产者总共生产了<span class="subst">&#123;gTimes&#125;</span>次"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;threading.current_thread()&#125;</span> 当前存入 <span class="subst">&#123;money&#125;</span> 元，剩余 <span class="subst">&#123;gMoney&#125;</span> 元"</span>)</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            gCondition.notify_all()</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">while</span> gMoney &lt; money:</span><br><span class="line">                <span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                print(<span class="string">f"<span class="subst">&#123;threading.current_thread()&#125;</span> 想取出 <span class="subst">&#123;money&#125;</span> 元，剩余 <span class="subst">&#123;gMoney&#125;</span> 元，不足！"</span>)</span><br><span class="line">                gCondition.wait()</span><br><span class="line"></span><br><span class="line">            gMoney -= money</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;threading.current_thread()&#125;</span> 取出 <span class="subst">&#123;money&#125;</span> 元，剩余 <span class="subst">&#123;gMoney&#125;</span> 元"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">f"消费者线程<span class="subst">&#123;x&#125;</span>"</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">f"生产者线程<span class="subst">&#123;x&#125;</span>"</span>).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Queue线程安全队列"><a href="#Queue线程安全队列" class="headerlink" title="Queue线程安全队列"></a>Queue线程安全队列</h3><p>在线程中，访问一些全局变量，加锁是一个经常的过程。如果你想把一些数据存储到某个队列中，可以使用Python内置的Queue模块。Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO(先进先出)队列、LIFO(后进先出)队列。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列实现线程间的同步。相关函数：</p><ol><li>初始化Queue(maxsize)：创建一个先进先出的队列</li><li>qsize()：返回队列的大小</li><li>empty()：判断队列是否为空</li><li>full()：判断队列是否满了</li><li>get()：从队列中取最后一个数据</li><li>put()：将一个数据放到队列中</li></ol><h4 id="使用生产者消费者模式多线程下载表情包"><a href="#使用生产者消费者模式多线程下载表情包" class="headerlink" title="使用生产者消费者模式多线程下载表情包"></a>使用生产者消费者模式多线程下载表情包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page_queue, img_queue, *args, **kwargs)</span>:</span></span><br><span class="line">        super(Producer, self).__init__(*args, **kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        text = response.text</span><br><span class="line">        html = etree.HTML(text)</span><br><span class="line">        imgs = html.xpath(<span class="string">'//a[@class="col-xs-6 col-sm-3"]/img'</span>)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            <span class="keyword">if</span> img.get(<span class="string">'class'</span>) == <span class="string">'gif'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img_url = img.get(<span class="string">'data-original'</span>)</span><br><span class="line">            suffix = os.path.splitext(img_url)[<span class="number">1</span>].replace(<span class="string">'.null'</span>, <span class="string">'.jpg'</span>)</span><br><span class="line">            alt = img.get(<span class="string">'alt'</span>)</span><br><span class="line">            alt = re.sub(<span class="string">r'[，。？！!?,/\\.]'</span>, <span class="string">''</span>, alt)</span><br><span class="line">            img_name = alt + suffix</span><br><span class="line">            self.img_queue.put((img_url, img_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page_queue, img_queue, *args, **kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args, **kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.img_queue.empty():</span><br><span class="line">                <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            img = self.img_queue.get(block=<span class="literal">True</span>)</span><br><span class="line">            url, filename = img</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'images'</span>):</span><br><span class="line">                os.makedirs(<span class="string">'images/'</span>)</span><br><span class="line">            result = util.retrieve(url, headers=self.headers, path=<span class="string">'images/'</span>+filename)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;filename&#125;</span> 下载完成!'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;filename&#125;</span> 下载失败！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    img_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        url = <span class="string">f'http://www.doutula.com/photo/list/?page=<span class="subst">&#123;x&#125;</span>'</span></span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Producer(page_queue, img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Consumer(page_queue, img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># util.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse, request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(url, headers=None, path=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(headers, dict):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    opener = request.build_opener()</span><br><span class="line">    opener.addheaders = [result <span class="keyword">for</span> result <span class="keyword">in</span> zip(headers.keys(), headers.values())]</span><br><span class="line">    request.install_opener(opener)</span><br><span class="line">    request.urlretrieve(url, path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlopen</span><span class="params">(url, headers=None, data=None,origin_req_host=None, unverifiable=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 method=None)</span>:</span></span><br><span class="line">    req = request.Request(url, headers=headers, data=data, origin_req_host=origin_req_host,</span><br><span class="line">                          unverifiable=unverifiable, method=method)</span><br><span class="line">    resp = request.urlopen(req)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h3 id="GIL全局解释器锁"><a href="#GIL全局解释器锁" class="headerlink" title="GIL全局解释器锁"></a>GIL全局解释器锁</h3><p>Python自带的解释器是CPython。CPython解释器的多线程实际上是一个伪多线程（在多核CPU中，只能利用一核，无法利用多核的优势）。同一时刻只有一个线程执行，为了保证同一时刻只有一个线程在执行，在CPython解释器中便引入了GIL（Global Intepreter Lock），叫做全局解释器锁。因为在CPython解释器的内存管理不是线程安全的，所以还有其他的解释器。</p><ul><li><p>Ipython</p><p>Ipython是基于CPython之上一个交互解释器，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。</p></li><li><p>PyPy</p><p>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以显著提高Python代码的执行速度。在PyPy中，同样也是存在GIL锁的。</p></li><li><p>Jython</p><p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。不存在GIL锁。</p></li><li><p>IronPython</p><p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。不存在GIL锁。</p></li></ul><p>GIL虽然是一个假的多线程，但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。在IO操作上建议使用多线程提高效率。在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程介绍&quot;&gt;&lt;a href=&quot;#多线程介绍&quot; class=&quot;headerlink&quot; title=&quot;多线程介绍&quot;&gt;&lt;/a&gt;多线程介绍&lt;/h3&gt;&lt;p&gt;多线程时为了同步完成多项任务，通过提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。就好比多线程是火车的每一节车厢，而进程就是火车，车厢离开火车无法启动。多线程的出现是为了提高效率。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://quiryrain.ml/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="多线程" scheme="https://quiryrain.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="threading" scheme="https://quiryrain.ml/tags/threading/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup4库</title>
    <link href="https://quiryrain.ml/190628-1/"/>
    <id>https://quiryrain.ml/190628-1/</id>
    <published>2019-06-28T10:42:52.000Z</published>
    <updated>2020-07-14T00:14:35.984Z</updated>
    
    <content type="html"><![CDATA[<p>和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要的功能也是解析和提取HTML/XML数据。</p><p>lxml只会局部遍历，而BeautifulSoup是基于HTML DOM的，它会加载整个文档，解析整个DOM树，因此在时间和内存上也会有很大的开销，所以性能要低于lxml。</p><p>BeautifulSoup用来解析HTML比较简单，其API设计的非常人性化，同时BeautifulSoup也支持CSS选择器、Python标准库中的HTML解析器、lxml的XML。</p><a id="more"></a><p>安装：<code>pip install bs4</code></p><p>中文文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h3 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h3><table><thead><tr><th>解析工具</th><th>解析速度</th><th>使用难度</th></tr></thead><tbody><tr><td>BeautifulSoup4</td><td>最慢</td><td>最简单</td></tr><tr><td>lxml</td><td>快</td><td>简单</td></tr><tr><td>正则</td><td>最快</td><td>最难</td></tr></tbody></table><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure><p>BeautifulSoup(markup, features):在使用的时候需要指定解析器，如果未指定，BeautifulSoup使用的Python标准库中的HTML解析器，同时beautifulsoup也支持第三方的解析器如lxml。另一个可供选择的解析器是纯Python实现的html5lib，html5lib的解析方式与浏览器相同。</p><p>安装lxml：<code>pip install lxml</code></p><p>安装html5lib: <code>pip install html5lib</code></p><p>主要解析器的优缺点：</p><p><img data-src="/userImages/20190629_000.png" alt="解析器"></p><h3 id="四个常用的对象"><a href="#四个常用的对象" class="headerlink" title="四个常用的对象"></a>四个常用的对象</h3><p>BeautifulSoup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，所有对象可以归纳为4种：</p><ol><li>Tag</li><li>NavigatableString</li><li>BeautifulSoup</li><li>Comment</li></ol><h3 id="操作讲解"><a href="#操作讲解" class="headerlink" title="操作讲解"></a>操作讲解</h3><p>以下内容以4个例子的形式进行讲解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div data-v-a6e3291a="" class="correlation-degree"&gt;</span></span><br><span class="line"><span class="string">  &lt;div data-v-a6e3291a="" class="recruit-wrap recruit-margin"&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;TEG15-计费产品web前端开发工程师（深圳）&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;TEG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;深圳,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责腾讯计费平台基础支付前端架构设计和开发工作； 参与需求评审、架构设计、编码设计和上线运维； 负责用户体验优化，包括但不限于：业务流程、前端展示、性能、安全等。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;PCG19-腾讯视频媒资后台开发工程师&lt;/h4&gt;</span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;PCG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;北京,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;腾讯视频&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责腾讯视频媒资中台开发工作。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;TEG15-计费系统前端测试工程师（深圳）&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;TEG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;深圳,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责web端/后台系统测试工作，从整个项目角度规划测试方法，达成项目质量目标； 负责web端/后台系统的自动化测试、性能测试，稳定性以及其它专项测试； 负责研究web端/后台系统测试技术，跟进业界测试技术发展，引进先进测试方法并开展二次开发，建立团队质量体系建设，有效提升测试效率&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;32032-资深后台开发工程师（上海）&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;IEG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;上海,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;游戏服务器的功能开发和现有系统的持续优化； 负责服务器压力测试和性能优化； 负责服务器外网运营的持续跟进和优化。 &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;WXG03-搜索自然语言算法工程师&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;WXG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;广州,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责包括新词发现、命名实体识别、查询理解、意图提取、知识图谱、搜索喜好偏向性等相关系统的建设，用以优化微信小程序搜索各产品方向的流量分发，并参与工程实践。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;WXG03-搜索检索算法工程师&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;WXG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;广州,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责微信小程序搜索各个产品方向的检索工作，内容包括页面识别、页面核心数据提取、页面分类、页面评分、词权重、排序等相关工作，并与开发工程师配合进行工程实践。 &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;23486-证券业务C++后台开发高级工程师（深圳）&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;CDG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;深圳,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责证券交易、风控、清算等系统的开发维护，建设证券业务相关的技术基础平台。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;22989-腾讯云数据平台产品中心运营开发&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;CSIG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;深圳,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责腾讯云数据平台产品的设计和研发。 负责云产品数据管理和服务的设计和研发。 负责构建和完善云底层数据的存储和查询，优化数据的质量和监控能力。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;18428-证券业务测试工程师&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;CDG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;北京,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;财付通&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责证券类产品的功能、性能、安全、自动化等测试工作，包括终端/H5及后台系统的测试。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div data-v-a6e3291a="" class="recruit-list"&gt;</span></span><br><span class="line"><span class="string">      &lt;a data-v-a6e3291a="" class="recruit-list-link"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 data-v-a6e3291a="" class="recruit-title"&gt;30360-后台平台开发（深圳）&lt;/h4&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-tips"&gt;</span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;PCG&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;深圳总部,中国&lt;/span&gt; | </span></span><br><span class="line"><span class="string">          &lt;span data-v-a6e3291a=""&gt;技术&lt;/span&gt; | &lt;span data-v-a6e3291a=""&gt;2019年06月28日&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p data-v-a6e3291a="" class="recruit-text"&gt;负责QQ平台海量用户和数据的基础后台研发工作； 负责AI基础架构系统后台研发工作； 负责推荐系统，大数据分析计算后台研发工作。&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/a&gt; </span></span><br><span class="line"><span class="string">      &lt;div data-v-a6e3291a="" class="recruit-collection"&gt;</span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="icon-collection"&gt;&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;span data-v-a6e3291a="" class="collection-text"&gt;收藏&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>获取所有的class属性为“recruit-list”的div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">divs = soup.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">"recruit-list"</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    print(div)</span><br></pre></td></tr></table></figure></li><li><p>获取第二个class属性为“recruit-list”的div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div = soup.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">"recruit-list"</span>&#125;, limit=<span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">print(div)</span><br></pre></td></tr></table></figure></li><li><p>获取所有的h4标签中的class属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h4_texts = soup.find_all(<span class="string">'h4'</span>)</span><br><span class="line"><span class="keyword">for</span> h4_text <span class="keyword">in</span> h4_texts:</span><br><span class="line">    print(h4_text[<span class="string">'class'</span>])</span><br></pre></td></tr></table></figure></li><li><p>获取所有的职位信息（纯文本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aEs = soup.find_all(<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure><ol><li><p>方法一</p><p>输出的字符串中可能包含了很多空格或空行,使用 <code>.stripped_strings</code> 可以去除多余空白内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> aE <span class="keyword">in</span> aEs:</span><br><span class="line">    infos = list(aE.stripped_strings)</span><br><span class="line">    print(infos)</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">job = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> aE <span class="keyword">in</span> aEs:</span><br><span class="line">    h4 = aE.find(<span class="string">'h4'</span>).string</span><br><span class="line">    ps = aE.find_all(<span class="string">'p'</span>)</span><br><span class="line">    spans = ps[<span class="number">0</span>].find_all(<span class="string">'span'</span>)</span><br><span class="line">    span = <span class="string">'|'</span>.join([s.string <span class="keyword">for</span> s <span class="keyword">in</span> spans])</span><br><span class="line">    p2 = ps[<span class="number">1</span>].string</span><br><span class="line">    job[<span class="string">'title'</span>] = h4</span><br><span class="line">    job[<span class="string">'info'</span>] = span</span><br><span class="line">    job[<span class="string">'desc'</span>] = p2</span><br><span class="line">    print(job)</span><br></pre></td></tr></table></figure></li><li><p>方法三</p><p>该方法提取出的内容中包含换行、空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> aE <span class="keyword">in</span> aEs:</span><br><span class="line">    print(list(aE.strings))</span><br></pre></td></tr></table></figure></li></ol><p>_注意_：</p><p>strings和stripped_strings、string属性和get_text方法：</p><ol><li>string：获取某个标签下的非标签字符串。返回值为字符串。</li><li>strings：获取某个标签下的所有非标签字符串，返回结果为一个生成器。</li><li>stripped_strings：获取某个标签下的所有非空行、非换行的非标签字符串，返回结果为一个生成器。</li><li>get_text：获取某个标签下的所有非标签字符串，返回结果为字符串。</li></ol></li></ul><h3 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h3><h4 id="find和find-all方法"><a href="#find和find-all方法" class="headerlink" title="find和find_all方法"></a>find和find_all方法</h4><p>搜索文档树，一般采用较多的是这两个方法，一个是find，另一个是find_all方法。find方法是在文档树中找到第一个满足条件的标签后就返回结果。find_all方法是在文档树中找到所有满足条件的标签后返回结果。在这两个方法中最常用的用法是name和attr参数，其中也可以直接传入关键字，在传入关键字”class”时，需要将”class”变为”class_”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'div'</span>, class_=<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure><h4 id="select方法"><a href="#select方法" class="headerlink" title="select方法"></a>select方法</h4><p>在使用css选择器的方式时，需要使用select方法。以下为几种常用的css选择器方法：</p><ol><li><p>通过标签名查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure></li><li><p>通过类名查找</p><p>通过类名，应该在前面加一个”.”,比如要查找class=sister的标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'.sister'</span>))</span><br></pre></td></tr></table></figure></li><li><p>通过id查找</p><p>通过id查找，应该在id的名字前面加一个”#”号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'#link1'</span>))</span><br></pre></td></tr></table></figure></li><li><p>通过组合查找</p><p>组合查找时，标签名和类名、id名进行组合的方式进行查找，例如查找p标签中，id等于link1的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"p #link1"</span>))</span><br></pre></td></tr></table></figure><p>直接子标签查找，则用”&gt;”分隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"head &gt; title"</span>))</span><br></pre></td></tr></table></figure></li><li><p>通过属性查找</p><p>查找时还可以加入属性元素，属性元素需要使用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>))</span><br></pre></td></tr></table></figure></li><li><p>获取内容</p><p>以上的select方法返回的结果都是以列表的形式返回的，可以进行遍历输出，然后使用get_text()方法获取其他的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(type(soup.select(<span class="string">'title'</span>)))</span><br><span class="line">print(soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">'title'</span>):</span><br><span class="line">    print(title.get_text())</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和lxml一样，BeautifulSoup也是一个HTML/XML的解析器，主要的功能也是解析和提取HTML/XML数据。&lt;/p&gt;
&lt;p&gt;lxml只会局部遍历，而BeautifulSoup是基于HTML DOM的，它会加载整个文档，解析整个DOM树，因此在时间和内存上也会有很大的开销，所以性能要低于lxml。&lt;/p&gt;
&lt;p&gt;BeautifulSoup用来解析HTML比较简单，其API设计的非常人性化，同时BeautifulSoup也支持CSS选择器、Python标准库中的HTML解析器、lxml的XML。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://quiryrain.ml/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="bs4" scheme="https://quiryrain.ml/tags/bs4/"/>
    
  </entry>
  
  <entry>
    <title>XPath语法详解</title>
    <link href="https://quiryrain.ml/190628/"/>
    <id>https://quiryrain.ml/190628/</id>
    <published>2019-06-28T07:40:35.000Z</published>
    <updated>2020-07-14T00:14:40.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Xpath语法和lxml模块"><a href="#Xpath语法和lxml模块" class="headerlink" title="Xpath语法和lxml模块"></a>Xpath语法和lxml模块</h3><h4 id="什么是XPath？"><a href="#什么是XPath？" class="headerlink" title="什么是XPath？"></a>什么是XPath？</h4><p>xpath (XML Path Language)是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。</p><a id="more"></a><h4 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h4><ol><li>Chrom插件XPath Helper</li><li>FireFox插件XPath Checker</li></ol><h4 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h4><h5 id="选取节点："><a href="#选取节点：" class="headerlink" title="选取节点："></a>选取节点：</h5><p>Xpath使用路径表达式选取XML文档中的节点或 节点集。</p><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有结点</td><td>bookstore</td><td>选取bookstore下所有的节点</td></tr><tr><td>/</td><td>如果是在最前面，代表从根节点选取。否者选取某节点下的某个节点</td><td>/bookstore</td><td>选取根元素下所有的bookstore节点</td></tr><tr><td>//</td><td>从全局节点中选择节点</td><td>//book</td><td>选取所有的bookstore节点</td></tr><tr><td>@</td><td>选取某个节点的属性</td><td>//book[@id]</td><td>选取所有拥有id属性的book节点</td></tr></tbody></table><h5 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h5><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。</p><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取bookstore下的第一个book元素</td></tr><tr><td>/bookstore/book[last()]</td><td>选取bookstore下的倒数第二个book元素</td></tr><tr><td>/bookstore/book[position() &lt; 3]</td><td>选取bookstore下前两个book元素</td></tr><tr><td>//book[@id]</td><td>选取拥有id属性的所有book元素</td></tr><tr><td>//book[@id=10]</td><td>选取所有id=10的所有book元素</td></tr></tbody></table><h5 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h5><p><code>*</code> 表示通配符</p><table><thead><tr><th>通配符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>*</td><td>匹配任意节点</td><td>/bookstore/*</td><td>选取bookstore下所有的子元素</td></tr><tr><td>@*</td><td>匹配节点中的任何属性</td><td>//book[@*]</td><td>选取所有带有属性的book元素</td></tr></tbody></table><h5 id="选取多个路径："><a href="#选取多个路径：" class="headerlink" title="选取多个路径："></a>选取多个路径：</h5><p>通过在路径表达式中使用“|”运算符，可以选取若干路径。</p><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//bookstore/book | //book/title</span><br><span class="line">### 选取所有book元素以及book元素下所有的title元素</span><br></pre></td></tr></table></figure><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td>&#124;</td><td>计算两个节点集</td><td>//book &#124; //cd</td><td>返回所有拥有book 和cd元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>6+4</td><td>10</td></tr><tr><td>-</td><td>减法</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘法</td><td>6*4</td><td>24</td></tr><tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>id=101</td><td>如果id=101，则返回True，否则返回False</td></tr><tr><td>!=</td><td>不等于</td><td>id != 101</td><td>如果id != 101，则返回True，否则返回False</td></tr><tr><td>&lt;</td><td>小于</td><td>id &lt; 101</td><td>如果id &gt; 101，则返回True，否则返回False</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>id &lt;= 101</td><td>如果id &lt;= 101，则返回True，否则返回False</td></tr><tr><td>&gt;</td><td>大于</td><td>id &gt; 101</td><td>如果id &gt; 101，则返回True，否则返回False</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>id &gt;= 101</td><td>如果id &gt;= 101，则返回True，否则返回False</td></tr><tr><td>or</td><td>或</td><td>id =100 or id = 101</td><td>如果id = 100 或id=101，返回True， 否则返回False</td></tr><tr><td>and</td><td>与</td><td>id &gt; 100 and id &lt; 150</td><td>如果100 &lt; id &lt; 101,返回True，否则返回False</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr></tbody></table><p><em>注意:</em></p><ol><li><p>/和//的区别：/代表只获取直接子节点， //代表获取子孙节点。</p></li><li><p>contains：有时某个属性中包含多个值，可以使用模糊匹配的方式获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;div[contaions(@class, &#39;job_detail&#39;)]</span><br></pre></td></tr></table></figure></li></ol><h3 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h3><p>lxml是一个HTML/XML的解析器，主要的功能是如何解析和提取HTML/XML数据。</p><p>lxml和正则一样，也是C实现的，是一款高性能的Python HTML/XML解析器，它可以用来快速的定位特定元素以及节点信息。</p><p>安装：<code>pip install lxml</code></p><h4 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h4><p>在用lxml解析HTML代码的时候，如果HTML代码不规范，lxml库会自动的将其补全。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用lxml的etree库</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link0.html"&gt;First item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link1.html"&gt;Second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link2.html"&gt;Third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link3.html"&gt;Fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link4.html"&gt;Fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_result</span><span class="params">(html)</span>:</span></span><br><span class="line">    result = etree.tostring(html, encoding=<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(result)</span><br><span class="line">    </span><br><span class="line">print_result(html)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link0.html"</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span>Fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>Fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在解析html文件时，如果使用的<code>lxml.etree.parse</code>解析。该函数默认使用的解析器是<code>XML</code>解析器，所以，如果html文件中缺少相应标签，解析就会出错，此时可以自行创建解析器。</p><h4 id="lxml的使用"><a href="#lxml的使用" class="headerlink" title="lxml的使用"></a>lxml的使用</h4><p>以上文的text为例：</p><ul><li><p>获取ul标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uls = html.xpath(<span class="string">'//ul'</span>)</span><br><span class="line"><span class="keyword">for</span> ut <span class="keyword">in</span> uls:</span><br><span class="line">    print_result(ut)</span><br></pre></td></tr></table></figure></li><li><p>获取&lt;li class=”item-1”&gt;标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li_items_1 = html.xpath(<span class="string">"//li[@class='item-1']"</span>)</span><br><span class="line"><span class="keyword">for</span> li_item_1 <span class="keyword">in</span> li_items_1:</span><br><span class="line">    print_result(li_item_1)</span><br></pre></td></tr></table></figure></li><li><p>获取所有&lt;li class=”item-1”&gt;中a标签中的链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li_items_1_as_href = html.xpath(<span class="string">"//li[@class='item-1']/a/@href"</span>)</span><br><span class="line"><span class="keyword">for</span> li_items_1_a_href <span class="keyword">in</span> li_items_1_as_href:</span><br><span class="line">    print(li_items_1_a_href)</span><br></pre></td></tr></table></figure></li><li><p>获取所有a标签中的文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">as_text = html.xpath(<span class="string">"//a/text()"</span>)</span><br><span class="line"><span class="keyword">for</span> a_text <span class="keyword">in</span> as_text:</span><br><span class="line">    print(a_text)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Xpath语法和lxml模块&quot;&gt;&lt;a href=&quot;#Xpath语法和lxml模块&quot; class=&quot;headerlink&quot; title=&quot;Xpath语法和lxml模块&quot;&gt;&lt;/a&gt;Xpath语法和lxml模块&lt;/h3&gt;&lt;h4 id=&quot;什么是XPath？&quot;&gt;&lt;a href=&quot;#什么是XPath？&quot; class=&quot;headerlink&quot; title=&quot;什么是XPath？&quot;&gt;&lt;/a&gt;什么是XPath？&lt;/h4&gt;&lt;p&gt;xpath (XML Path Language)是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://quiryrain.ml/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="XPath" scheme="https://quiryrain.ml/tags/XPath/"/>
    
  </entry>
  
  <entry>
    <title>Python 3中的Urllib库的使用</title>
    <link href="https://quiryrain.ml/190615/"/>
    <id>https://quiryrain.ml/190615/</id>
    <published>2019-06-15T07:17:25.000Z</published>
    <updated>2020-07-14T00:14:29.251Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中有着这样一个常用的、基础的爬虫库。在Python2中为urllib.urllib，在Python3中官方为了便于管理，将和请求有关的函数封装进了urllib.request模块中。</p><p>在此处，使用Python3做记录。</p><a id="more"></a><h3 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h3><p>urlopen函数是request中的一个很常用的函数，它主要用于打开一个网页。其中有着很多的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.open(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h3 id="urlretrieve函数"><a href="#urlretrieve函数" class="headerlink" title="urlretrieve函数"></a>urlretrieve函数</h3><p>urlretrieve函数可以很方便的将网页保存至本地。其实用方法见下方代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">request.urlretrieve()</span><br></pre></td></tr></table></figure><h3 id="urlencode函数"><a href="#urlencode函数" class="headerlink" title="urlencode函数"></a>urlencode函数</h3><p>将字典类型的数据转化为url编码的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse, request</span><br><span class="line"></span><br><span class="line">params = &#123;<span class="string">"wd"</span>: <span class="string">"爬虫之道"</span>&#125;</span><br><span class="line"></span><br><span class="line">qs = parse.urlencode(params)</span><br><span class="line"></span><br><span class="line">url = <span class="string">f"https://www.baidu.com/s?<span class="subst">&#123;qs&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">resp = request.urlopen(url)</span><br></pre></td></tr></table></figure><h3 id="parse-qs函数"><a href="#parse-qs函数" class="headerlink" title="parse_qs函数"></a>parse_qs函数</h3><p>将url编码后的参数还原为字典形式，其中的值以列表形式进行存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">ps = &#123;<span class="string">"name"</span>: <span class="string">"爬虫之道"</span>, <span class="string">"vxcode"</span>: <span class="string">"spider_rold"</span>&#125;</span><br><span class="line"></span><br><span class="line">results = parse.urlencode(ps)</span><br><span class="line"></span><br><span class="line">new_results = parse.parse_qs(results)</span><br><span class="line">print(new_results)</span><br></pre></td></tr></table></figure><h3 id="urlparse和urlsplit函数"><a href="#urlparse和urlsplit函数" class="headerlink" title="urlparse和urlsplit函数"></a>urlparse和urlsplit函数</h3><p>对URL各部分进行分割，其中在使用urlsplit函数时，没有_params_参数。（<em>注</em>：params参数指的是在以下链接中”?”前添加”;”，位于这两者之间的内容，如：_<a href="https://www.baidu.com/s;hello?wd=hello+world_%EF%BC%89" target="_blank" rel="noopener">https://www.baidu.com/s;hello?wd=hello+world_）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">params = &#123;<span class="string">"wd"</span>: <span class="string">"爬虫之道"</span>&#125;</span><br><span class="line"></span><br><span class="line">qs = parse.urlencode(params)</span><br><span class="line">url = <span class="string">f"https://www.baidu.com/s?<span class="subst">&#123;qs&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">result = parse.urlparse(url)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'scheme:'</span>, result.scheme)</span><br><span class="line">print(<span class="string">'netloc:'</span>, result.netloc)</span><br><span class="line">print(<span class="string">'path:'</span>, result.path)</span><br><span class="line">print(<span class="string">'params:'</span>, result.params)</span><br><span class="line">print(<span class="string">'query:'</span>, result.query)</span><br><span class="line">print(<span class="string">'fragment:'</span>, result.fragment)</span><br></pre></td></tr></table></figure><h3 id="request-Request类"><a href="#request-Request类" class="headerlink" title="request.Request类"></a>request.Request类</h3><p>在爬虫中，如果想使用一些参数，如：请求头，请求数据等，需要使用到Request类。如果只是使用urlopen函数，没有办法进行添加请求头。在没有使用_User-Agent_的时候，如果服务器发现是爬虫，服务器可能会返回一条假的数据内容，或者是不返回内容。所以，将爬虫程序伪装成正常的浏览器访问是很有必要的一件事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36"</span>&#125;</span><br><span class="line">params = &#123;<span class="string">"wd"</span>: <span class="string">"爬虫之道"</span>&#125;</span><br><span class="line"></span><br><span class="line">qs = parse.urlencode(params)</span><br><span class="line">url = <span class="string">f"https://www.baidu.com/s?<span class="subst">&#123;qs&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><p>注： 可以去挑战一下网络爬虫界的“珠穆朗玛峰” —– 拉勾网</p><h3 id="ProxyHandler处理器"><a href="#ProxyHandler处理器" class="headerlink" title="ProxyHandler处理器"></a>ProxyHandler处理器</h3><p>在爬取网站时，一般情况下网站都会做一些反爬虫机制，如封ip。如果只使用一个ip地址进行爬取，在网站封掉ip地址后，就无法获取数据了。所以，在有反爬虫机制的情况，反反爬虫机制便可以使用了。在urllib中通过使用ProxyHandler进行设置代理服务器。</p><p>在使用代理与未使用代理的区别：</p><p><img data-src="/userImages/proxy.jpg">  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment">### 未使用代理</span></span><br><span class="line">resp = request.urlopen(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(resp.read())</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用代理</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">"https"</span>: <span class="string">"58.253.152.231:9999"</span>&#125;)</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><p>常用的代理：</p><ul><li>西刺代理：<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">https://www.xicidaili.com</a></li><li>快代理: <a href="https://www.kuaidaili.com/free/" target="_blank" rel="noopener">https://www.kuaidaili.com/free/</a></li></ul><h3 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h3><p>在网站汇总，http请求是无状态的。在第一次和服务器建立连接登录后，第二次请求服务器依旧不能知道当前请求的用户是谁。Cookie的出现就是为了解决该问题。第一次登录后，服务器会返回一些数据(cookie) 给浏览器，然后浏览器将数据保存在本地。当用户发送第二次请求时，浏览器会自动的将保存在本地的数据(cookie)一起发送给服务器。服务通过判断不同的cookie信息，进行确认用户。cookie的存储大小是有限的一般不会超过4KB，因此在设置cookie对的时候，只能存储少量数据。</p><h4 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h4><p>Set-Cookie: NAME=VALUE；Expires=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE</p><p>参数含义：</p><ul><li>NAME：Cookie的名字</li><li>VALUE：Cookie的值</li><li>Expires:  Cookie的过期时间</li><li>Path：Cookie作用的路径</li><li>Domain： Cookie作用的域名</li><li>SECURE：是否只在HTTP协议下起作用</li></ul><h3 id="使用cookielib库和HTTPCookieProcessor模块模拟登陆"><a href="#使用cookielib库和HTTPCookieProcessor模块模拟登陆" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模块模拟登陆"></a>使用cookielib库和HTTPCookieProcessor模块模拟登陆</h3><p>在Python中使用cookie，一般是通过http.cookiejar模块和urllib模块的HTTPCookieProcessor处理器一起使用的。</p><ul><li>http.cookiejar：提供用于存储cookie的对象</li><li>HTTPCookieProcessor：处理cookie对象并构建handler对象</li></ul><h4 id="http-cookiejar模块"><a href="#http-cookiejar模块" class="headerlink" title="http.cookiejar模块"></a>http.cookiejar模块</h4><p>在该模块中主要有三个类，CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。其作用如下：</p><ul><li>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie，向传出的HTTP请求添加cookie对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie失效。</li><li>FileCookieJar (filename, delayload=None, policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例。检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名，delayload为True是支持延迟访问文件，即只有在需要时才读取文件或将数据存储在文件中。</li><li>MozillaCookieJar (filename, delayload=None, policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器cookies.txt兼容的FileCookieJar实例。</li><li>LWPCookieJar (filename, delayload=None, policy=None)：从FileCookieJar派生而来，创建与libwww·per标准的Set-Cookies3文件格式兼容的FileCookieJar实例。</li></ul><h3 id="保存Cookie至本地"><a href="#保存Cookie至本地" class="headerlink" title="保存Cookie至本地"></a>保存Cookie至本地</h3><p>保存cookie到本地，可以使用cookiejar的save方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">'cookies.txt'</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">handlers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>, headers=handlers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br><span class="line"></span><br><span class="line">cookiejar.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="加载本地cookie"><a href="#加载本地cookie" class="headerlink" title="加载本地cookie"></a>加载本地cookie</h3><p>从本地文件读取cookie信息，可以使用cookiejar中的load方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">'cookies.txt'</span>)</span><br><span class="line">cookiejar.load(ignore_discard=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookiejar:</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python中有着这样一个常用的、基础的爬虫库。在Python2中为urllib.urllib，在Python3中官方为了便于管理，将和请求有关的函数封装进了urllib.request模块中。&lt;/p&gt;
&lt;p&gt;在此处，使用Python3做记录。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://quiryrain.ml/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="urllib" scheme="https://quiryrain.ml/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>为Next加上彩色标签云</title>
    <link href="https://quiryrain.ml/190520/"/>
    <id>https://quiryrain.ml/190520/</id>
    <published>2019-05-20T10:02:00.000Z</published>
    <updated>2020-07-14T00:14:23.531Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直看hexo官方的标签云太难看，就google了一下。最终搜索到了这篇文章（<a href="https://me.idealli.com/post/d6caa003.html" target="_blank" rel="noopener">传送门</a>），在此也做下记录吧！</p><a id="more"></a><ol><li><p>打开themes –&gt; next –&gt; layout –&gt; page.swig文件</p></li><li><p>找到<code>{ % if page.type === &#39;tags&#39; % }</code></p></li><li><p>将下方代码进行替换即可</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">原内容：</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">  &#123;% if not theme.tagcloud %&#125;</span><br><span class="line">    &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 200, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    &#123;&#123; tagcloud(&#123;min_font: theme.tagcloud.min, max_font: theme.tagcloud.max, amount: theme.tagcloud.amount, color: true, start_color: theme.tagcloud.start, end_color: theme.tagcloud.end&#125;) &#125;&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">修改之后的内容：</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tag-cloud-tags&quot; id&#x3D;&quot;tags&quot;&gt;</span><br><span class="line">  &#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: &#39;#fff&#39;, end_color: &#39;#fff&#39;&#125;) &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  var alltags&#x3D;document.getElementById(&#39;tags&#39;);</span><br><span class="line">  var tags&#x3D;alltags.getElementsByTagName(&#39;a&#39;);</span><br><span class="line"></span><br><span class="line">  for (var i &#x3D; tags.length - 1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">    var r&#x3D;Math.floor(Math.random()*75+130);</span><br><span class="line">    var g&#x3D;Math.floor(Math.random()*75+100);</span><br><span class="line">    var b&#x3D;Math.floor(Math.random()*75+80);</span><br><span class="line">    tags[i].style.background &#x3D; &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">  div#posts.posts-expand .tag-cloud a&#123;</span><br><span class="line">    background-color: #f5f7f1;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">    padding-right: 10px;</span><br><span class="line">    margin-top: 18px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tag-cloud a&#123;</span><br><span class="line">    background-color: #f5f7f1;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding-right: 5px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">    margin-left: 0px;</span><br><span class="line">    margin-top: 8px;</span><br><span class="line">    margin-bottom: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  .tag-cloud a:before&#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tag-cloud-tags&#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    counter-reset: tags;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>之后清理缓存，重新部署就行了。</p><p>最终效果如下：</p><p><img data-src="/userImages/tag-cloud.png" alt="彩色标签云"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直看hexo官方的标签云太难看，就google了一下。最终搜索到了这篇文章（&lt;a href=&quot;https://me.idealli.com/post/d6caa003.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;），在此也做下记录吧！&lt;/p&gt;
    
    </summary>
    
      <category term="起始篇" scheme="https://quiryrain.ml/categories/%E8%B5%B7%E5%A7%8B%E7%AF%87/"/>
    
    
      <category term="标签云" scheme="https://quiryrain.ml/tags/%E6%A0%87%E7%AD%BE%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>那天一切都结束了</title>
    <link href="https://quiryrain.ml/190517/"/>
    <id>https://quiryrain.ml/190517/</id>
    <published>2019-05-17T12:16:52.000Z</published>
    <updated>2020-07-14T00:14:18.461Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX1+3yRnXtlkqEIojpMhwwV3W1WloawxBDox7R4ecF6PhIx9gaJTEm4LFVb5C2nW4ESWMYwH0y/UIRE9djEDUshHMUNW7kQ9acxNBbPT7U/8tMqtaDkrA6uUej7BiBTcip4IXodpFiTAAb/SjmlAGdunb0ZbmLcrzTeHdtIJHeA2eYftFKKRx+TDiDe5r0jeuf8zVvscm42A1hEog9nCQIqY9U0tWHkvC8QBFjDWjVk4OBeCpcAUYm5je9c82GOZuvlL4bQuqZLa/VY7TX91mgl8NuJWF60AiJLyv7G78Xrv9qjSRKTCyNL6UKmbiGUFGbt/Cf+IhjQrD9O3EXXcPpq67CPR4xiVpYsawmo4LiZH9bv3qopoI5Rz5LluvYkyohPRBSMRL6W8x+ke+xJx3p/pROP1WdmHy4XfbTYCsbbxpjOqaLuHy3L3WdZkRf2MQNwijUlNGD2zepB4QjeEgit3rX6rXaH7XomoWwQbg1dUf1ORL3cvGOvoGr9DDJ++24mFWu5/Zvm/lUu3k5+c0xKM2XE9dpip/WzkJK4RIePHomJAm7NMIxodpDOg71yyAJK47LV+n5/Nh9J/WhIkWdh+K0Q1UFKS4Sxe1meXQBf5DsnQJyBYUeByuAsElqxUuALJrstChFsCGb0jnzSa3OwCxN9rCfg131kPc29cEfDsdHB24dqcLXkwqCKe6OBAdNbUmv6FssWAundSV7/dK1SMcW7Zdbj+H4W9S9PxMSLRFBugnaMWujZ1QGxdcKSGdE1BqFmk1ILU+Wy1YzQlb0x4T9a5mwbJeNFuCsfO8wMPeBp48vnxIbmIwV4RFY+xGc0sAQMA4UsI28lJrGsUhuRaKiDBbOYJZBts=</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      个人心情
    
    </summary>
    
      <category term="往事回廊" scheme="https://quiryrain.ml/categories/%E5%BE%80%E4%BA%8B%E5%9B%9E%E5%BB%8A/"/>
    
    
      <category term="大学" scheme="https://quiryrain.ml/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用Cython保护Python文件</title>
    <link href="https://quiryrain.ml/190502-4/"/>
    <id>https://quiryrain.ml/190502-4/</id>
    <published>2019-05-02T04:02:58.000Z</published>
    <updated>2020-07-14T00:14:05.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Cython保护Python代码库"><a href="#使用Cython保护Python代码库" class="headerlink" title="使用Cython保护Python代码库"></a>使用Cython保护Python代码库</h1><p>从语言层面来说，Cython是一种拓展的Python，其文件的扩展名为.pyx。这种类型的文件通过编译之后可以变成供Python直接调用的动态链接库（Linux/Mac下是.so，Windows下是.pyd）。根据官方文档，主要如下几编译方式：</p><blockquote><ul><li>(推荐) 通过setup.py中调用Cython.Build进行编译</li><li>使用pyximport调用.pyx文件，这种方法.pyx文件相当于普通的.py文件</li><li>在命令行使用cython命令从.pyx文件生成.c文件，再使用外部编译器将.c文件编译成Python可用的库</li><li>使用Jupyter Notebook或者Sage Notebook直接运行Cython代码  </li></ul></blockquote><a id="more"></a><p>这上面四种方法里最简单的是第三种方法。运行<code>cythonize -i &lt;.pyx File&gt;</code>即可编译.pyx成二进制库，并保存在与.pyx文件相同的目录下。cythonize命令有其他的参数，可以通过命令行查看。这个命令也可以通过<code>python -m Cython.Build.Cythonize -i &lt;.pyx File&gt;</code>来完成。</p><p>  在对Python 代码进行保护时，可以采用Cython对Python代码记性二进制转换，尽管可以对二进制文件进行逆向工程，但是依然会起到一定的保护作用.</p><h2 id="对项目包进行编译"><a href="#对项目包进行编译" class="headerlink" title="对项目包进行编译"></a>对项目包进行编译</h2><p>对以下结构的包进行编译:</p><p><img data-src="/userImages/Cython_tree.png" alt="tree"></p><ul><li>通过<code>setup.py</code>文件进行简单编译</li></ul><p>在使用该方法编译的时候，一个函数只有一个参数时，有可能会出现无法找到函数的情况，鉴于这种情况，请参考复杂编译的过程。以Cython官方实例为例：</p><p><code>setup.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">  name = <span class="string">'Hello world app'</span>,</span><br><span class="line">  ext_modules = cythonize(<span class="string">"hello.py"</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>hello.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello_to</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello %s!"</span> % name)</span><br></pre></td></tr></table></figure><p><img data-src="/userImages/Cython_example1.png" alt="example1"></p><p>运行<code>python setup.py build_ext --inplace</code>，生成<code>.so</code>文件，删除该文件夹中的<code>py文件</code>和<code>c文件</code>。<br>在终端导入使用：<br><img data-src="/userImages/Cython_example2.png" alt="example2"></p><ul><li>使用<code>setup.py</code>文件进行复杂编译</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> setuptools.extension <span class="keyword">import</span> Extension</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"><span class="keyword">from</span> Cython.Distutils <span class="keyword">import</span> build_ext</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ext_modules=cythonize(</span><br><span class="line">        [</span><br><span class="line">            Extension(<span class="string">'mypkg.*'</span>, [<span class="string">'mypkg/*.py'</span>]),</span><br><span class="line">            Extension(<span class="string">'mypkg.submypkg1.*'</span>, [<span class="string">'mypkg/submypkg1/*.py'</span>]),</span><br><span class="line">            Extension(<span class="string">'mypkg.submypkg2.*'</span>, [<span class="string">'mypkg/submypkg2/*.py'</span>]),</span><br><span class="line">            Extension(<span class="string">'mypkg2.*'</span>, [<span class="string">'mypkg2/*.py'</span>]),</span><br><span class="line">        ],</span><br><span class="line">        build_dir=<span class="string">'build'</span>,</span><br><span class="line">        compiler_directives=dict(</span><br><span class="line">            always_allow_keywords=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    cmdclass = dict(</span><br><span class="line">        build_ext=build_ext</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│   ├── mypkg</span><br><span class="line">│   │   ├── bar.c</span><br><span class="line">│   │   ├── foo.c</span><br><span class="line">│   │   ├── __init__.c</span><br><span class="line">│   │   ├── submypkg1</span><br><span class="line">│   │   │   ├── bar.c</span><br><span class="line">│   │   │   ├── foo.c</span><br><span class="line">│   │   │   └── __init__.c</span><br><span class="line">│   │   └── submypkg2</span><br><span class="line">│   │       ├── bar.c</span><br><span class="line">│   │       ├── foo.c</span><br><span class="line">│   │       └── __init__.c</span><br><span class="line">│   ├── mypkg2</span><br><span class="line">│   │   ├── bar.c</span><br><span class="line">│   │   ├── foo.c</span><br><span class="line">│   │   └── __init__.c</span><br><span class="line">│   └── temp.linux-x86_64-3.7</span><br><span class="line">│       └── build</span><br><span class="line">│           ├── mypkg</span><br><span class="line">│           │   ├── bar.o</span><br><span class="line">│           │   ├── foo.o</span><br><span class="line">│           │   ├── __init__.o</span><br><span class="line">│           │   ├── submypkg1</span><br><span class="line">│           │   │   ├── bar.o</span><br><span class="line">│           │   │   ├── foo.o</span><br><span class="line">│           │   │   └── __init__.o</span><br><span class="line">│           │   └── submypkg2</span><br><span class="line">│           │       ├── bar.o</span><br><span class="line">│           │       ├── foo.o</span><br><span class="line">│           │       └── __init__.o</span><br><span class="line">│           └── mypkg2</span><br><span class="line">│               ├── bar.o</span><br><span class="line">│               ├── foo.o</span><br><span class="line">│               └── __init__.o</span><br><span class="line">├── mypkg</span><br><span class="line">│   ├── bar.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   ├── bar.py</span><br><span class="line">│   ├── foo.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   ├── foo.py</span><br><span class="line">│   ├── __init__.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── submypkg1</span><br><span class="line">│   │   ├── bar.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   │   ├── bar.py</span><br><span class="line">│   │   ├── foo.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   │   ├── foo.py</span><br><span class="line">│   │   ├── __init__.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   └── submypkg2</span><br><span class="line">│       ├── bar.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│       ├── bar.py</span><br><span class="line">│       ├── foo.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│       ├── foo.py</span><br><span class="line">│       ├── __init__.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│       └── __init__.py</span><br><span class="line">├── mypkg2</span><br><span class="line">│   ├── bar.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   ├── bar.py</span><br><span class="line">│   ├── foo.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   ├── foo.py</span><br><span class="line">│   ├── __init__.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── setup.py</span><br></pre></td></tr></table></figure><ul><li>运行文件<code>python setup.py build_ext --inplace</code></li><li>最终会在当前文件夹中生成build文件夹，同时在build文件夹中生成相应的文件夹和<code>.c</code>文件，在主目录对应的文件夹中生成<code>.so</code>文件，此时的<code>.so</code>文件就可以通过导入的方式直接使用。</li><li>如果需求有改动，需要删除相应的<code>.so文件</code>后重新生成该文件。</li></ul><hr><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>此<code>always_allow_keywords=True</code>参数一定要添加，因为<code>always_allow_keywords</code>指令禁用具有大量参数的函数只允许使用关键字参数，如果不禁用，此处在传入一个参数时会找不到对应的函数。</li><li>在使用第二种方法时，一定要注意一点，在有celery task任务的文件中，无法进行编译，否则在编译过后会出现celery无法启动的情况。<ul><li>对上文出现的问题进行给出一个解答：<br>在上文中，如果编译了带有task任务的文件，会出现以下错误  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: <span class="string">'method-wrapper'</span> object has no attribute <span class="string">'__module__'</span></span><br></pre></td></tr></table></figure>解决方法为：  <blockquote><ul><li>创建第三方真实执行逻辑的文件，在进行加密时，加密第三方逻辑文件，对celery调度任务的文件不进行加密。</li><li>见官方给出的解决方式<a href="https://github.com/celery/celery/issues/4342" target="_blank" rel="noopener">Issues</a>，不过此处不建议更改celery源文件。</li></ul></blockquote></li></ul></li></ul><hr><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul><li><a href="https://bucharjan.cz/blog/using-cython-to-protect-a-python-codebase.html" target="_blank" rel="noopener">Using Cython to protect a Python codebase</a></li><li><a href="https://python.freelycode.com/contribution/detail/981" target="_blank" rel="noopener">对《Using Cython to protect a Python codebase》的翻译</a></li><li><a href="http://docs.cython.org/en/latest/" target="_blank" rel="noopener">Cython Documentation</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Cython保护Python代码库&quot;&gt;&lt;a href=&quot;#使用Cython保护Python代码库&quot; class=&quot;headerlink&quot; title=&quot;使用Cython保护Python代码库&quot;&gt;&lt;/a&gt;使用Cython保护Python代码库&lt;/h1&gt;&lt;p&gt;从语言层面来说，Cython是一种拓展的Python，其文件的扩展名为.pyx。这种类型的文件通过编译之后可以变成供Python直接调用的动态链接库（Linux/Mac下是.so，Windows下是.pyd）。根据官方文档，主要如下几编译方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;(推荐) 通过setup.py中调用Cython.Build进行编译&lt;/li&gt;
&lt;li&gt;使用pyximport调用.pyx文件，这种方法.pyx文件相当于普通的.py文件&lt;/li&gt;
&lt;li&gt;在命令行使用cython命令从.pyx文件生成.c文件，再使用外部编译器将.c文件编译成Python可用的库&lt;/li&gt;
&lt;li&gt;使用Jupyter Notebook或者Sage Notebook直接运行Cython代码  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Cython" scheme="https://quiryrain.ml/categories/Cython/"/>
    
    
      <category term="加密" scheme="https://quiryrain.ml/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Cython" scheme="https://quiryrain.ml/tags/Cython/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL学习总结</title>
    <link href="https://quiryrain.ml/190502-3/"/>
    <id>https://quiryrain.ml/190502-3/</id>
    <published>2019-05-02T03:42:09.000Z</published>
    <updated>2020-07-14T00:13:59.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PG数据库："><a href="#PG数据库：" class="headerlink" title="PG数据库："></a>PG数据库：</h1><p>理解：对于PostgreSQL数据库，我个人理解为和MySQL数据库很相识，比MySQL功能多，在pg数据库中，用户可以指定表集合，这点和mongodb很像。</p><blockquote><p>模式(架构)：是指定的表集合，它还可以包含视图、索引、序列、数据类型、运算符和函数.</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建模式:create schema &lt;schemaname&gt;</span><br></pre></td></tr></table></figure><h1 id="架构作用"><a href="#架构作用" class="headerlink" title="架构作用:"></a>架构作用:</h1><blockquote><p>1、模式有助于多用户使用一个数据库,而不会互相干扰</p><p>2、将数据库对象组织成逻辑组,使其更易于管理</p><p>3、可以将第三方模式放入单独的模式中,以避免与其他对象的名称相冲突</p></blockquote><h1 id="PostgreSQL中的连接类型："><a href="#PostgreSQL中的连接类型：" class="headerlink" title="PostgreSQL中的连接类型："></a>PostgreSQL中的连接类型：</h1><ul><li><p>内连接（inner join）显示两个集合共有部分（交集）</p><p>  select table1.columns,table2.columns from table1 inner join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>左外连接（left outer join）显示左集合的全部，右集合不满足的用空补全</p><p>  select table1.columns,table2.columns from table1 left outer join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>右外连接（right outer join）显示右集合的全部，左集合不满足的用空补全</p><p>  select table1.columns,table2.columns from table1 right outer join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>全连接（full outer join）显示两个集合的全部，不满足条件的用空补全</p><p>  select table1.columns,table2.columns from table1 full outer join table2 on table1.common_filed = table2.common_filed;</p></li><li><p>跨连接（cross join）将第一个表的每一行与第二个表的每一行相匹配。</p><p>  select coloums from table1 cross join table2;</p></li><li><p>having子句和group by子句组合使用，用于选择函数结果满足某些条件的特定行。</p></li></ul><h1 id="普通用户创建与登陆："><a href="#普通用户创建与登陆：" class="headerlink" title="普通用户创建与登陆："></a>普通用户创建与登陆：</h1><blockquote><p>1、登陆超级用户：sudo -u postgres psql</p><p>2、创建用户：create user dbuser encrypted password ‘test’;</p><p>3、授权：alter user dbuser with createdb; alter user dbuser with login;</p><p>4、创建dbuser用户的数据集：create database dbusers with owner=’dbuser’;</p><p>5、退出\q</p><p>6、普通用户登陆：psql -U dbuser -d dbusers -h localhost</p></blockquote><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> auditlogfunc() <span class="keyword">returns</span> <span class="keyword">trigger</span> <span class="keyword">as</span> $example_table$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">audit</span>(emp_id,entry_date) <span class="keyword">values</span> (new.ID, <span class="keyword">current_timestamp</span>);</span><br><span class="line">return new</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$example_table$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> example_trigger <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> company <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">execute</span> <span class="keyword">procedure</span> auditlogfunc();</span><br></pre></td></tr></table></figure><blockquote><p>PostgreSQL触发器目的：</p><p>1、验证输入数据</p><p>2、执行业务规则</p><p>3、为不同文件中新插入的行生成唯一值</p><p>4、写入其他文件以急性审计跟踪</p><p>5、从其他文件查询交叉引用目的</p><p>6、访问系统函数</p><p>7、将数据复制到不同的文件以实现数据一致性</p></blockquote><h1 id="触发器的查询、删除："><a href="#触发器的查询、删除：" class="headerlink" title="触发器的查询、删除："></a>触发器的查询、删除：</h1><ul><li>列出当前数据库的所有触发器：select * from pg_trigger;</li><li>列出某张表上的触发器：SELECT tgname FROM pg_trigger, pg_class WHERE tgrelid=pg_class.oid AND relname=’&lt;tablename&gt;’;</li><li>删除触发器：drop trigger <trigger_name>;</li></ul><h1 id="查询创建的函数："><a href="#查询创建的函数：" class="headerlink" title="查询创建的函数："></a>查询创建的函数：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">pg_proc.proname <span class="keyword">AS</span> <span class="string">"函数名称"</span>,</span><br><span class="line">pg_type.typname <span class="keyword">AS</span> <span class="string">"返回值数据类型"</span>,</span><br><span class="line">pg_proc.pronargs <span class="keyword">AS</span> <span class="string">"参数个数"</span> </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">pg_proc </span><br><span class="line"><span class="keyword">JOIN</span> pg_type <span class="keyword">ON</span> (pg_proc.prorettype = pg_type.oid) </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">pg_type.typname != <span class="string">'void'</span> </span><br><span class="line"><span class="keyword">AND</span> </span><br><span class="line">pronamespace = (<span class="keyword">SELECT</span> pg_namespace.oid <span class="keyword">FROM</span> pg_namespace <span class="keyword">WHERE</span> nspname = <span class="string">'public'</span>);</span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>用于加速从数据库中检索数据</p><blockquote><p>创建索引:create index index_name on table_name;</p></blockquote><p>响应时间的计算模型：<br>响应时间=网络传输时间（请求）+服务器处理时间（一层或是多层）+网络传输时间（响应）+页面前段解析时间</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PG数据库：&quot;&gt;&lt;a href=&quot;#PG数据库：&quot; class=&quot;headerlink&quot; title=&quot;PG数据库：&quot;&gt;&lt;/a&gt;PG数据库：&lt;/h1&gt;&lt;p&gt;理解：对于PostgreSQL数据库，我个人理解为和MySQL数据库很相识，比MySQL功能多，在pg数据库中，用户可以指定表集合，这点和mongodb很像。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模式(架构)：是指定的表集合，它还可以包含视图、索引、序列、数据类型、运算符和函数.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PostgreSQL" scheme="https://quiryrain.ml/categories/PostgreSQL/"/>
    
    
      <category term="学习总结" scheme="https://quiryrain.ml/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="PostgreSQL" scheme="https://quiryrain.ml/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Git学习总结</title>
    <link href="https://quiryrain.ml/190502-2/"/>
    <id>https://quiryrain.ml/190502-2/</id>
    <published>2019-05-02T03:39:40.000Z</published>
    <updated>2020-07-14T00:13:55.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git整理："><a href="#git整理：" class="headerlink" title="git整理："></a>git整理：</h1><blockquote><p>工作区中的.git目录为Git版本库，git add将文件提交到暂存区,git commit将文件提交到本地仓库，git push将文件提交到远程仓库。</p></blockquote><a id="more"></a><h1 id="历史版本回退及提交至远程仓库"><a href="#历史版本回退及提交至远程仓库" class="headerlink" title="历史版本回退及提交至远程仓库"></a>历史版本回退及提交至远程仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^  可以回退版本  当回退多个版本时可以使用 HEAD~100（恢复到第100个版本）。</span><br><span class="line">git reflog 用于记录每次的命令，最上方为最近一次的命令</span><br><span class="line">git reset HEAD &lt;file&gt; 将缓存区中的修改回退到工作区。</span><br><span class="line">git checkout -- &lt;file&gt; 将版本库中的版本替换工作区的版本，可以做恢复用。</span><br><span class="line">git push 将当前分支master推送到远程</span><br><span class="line">git commit 将缓存区中的文件推送到分支master(本地)</span><br></pre></td></tr></table></figure><h1 id="分支的创建、切换与合并"><a href="#分支的创建、切换与合并" class="headerlink" title="分支的创建、切换与合并"></a>分支的创建、切换与合并</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch&gt; 创建一个分支并切换，等同于git branch &lt;branch&gt; git checkout &lt;branch&gt;两条命令</span><br><span class="line">git branch 查看当前分支</span><br><span class="line">git merge 命令用于合并指定分支到当前分支</span><br><span class="line">git branch -d &lt;branch&gt; 删除分支</span><br><span class="line">git log --graph 可以查看分支合并图</span><br></pre></td></tr></table></figure><h1 id="对远程分支进行操作"><a href="#对远程分支进行操作" class="headerlink" title="对远程分支进行操作"></a>对远程分支进行操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete branch &lt;branchname&gt;或git push origin :&lt;branchname&gt; 删除远程仓库中的分支</span><br></pre></td></tr></table></figure><blockquote><p>重命名远程分支：<br>1、删除远程分支：git push –delete origin <branchname><br>2、重命名本地分支：git branch -m <old> <new><br>3、推送本地分支：git push origin <NewBranchName></p></blockquote><h1 id="提交出错解决方法"><a href="#提交出错解决方法" class="headerlink" title="提交出错解决方法"></a>提交出错解决方法</h1><p>如果在提交远程仓库的时候出现“更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支”，此时应该先获取远程更新,然后合并本地的分支，最后提交.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin;# 获取运程仓库</span><br><span class="line">git merge origin&#x2F;master# 将本地仓库与远程仓库合并</span><br><span class="line"></span><br><span class="line">git pull &#x3D; git fetch + git merge 可能会产生冲突，需要手动解决</span><br><span class="line"></span><br><span class="line">--no-ff 参数表示禁用Fast forward</span><br></pre></td></tr></table></figure><p>如果出现”您要求从远程 ‘origin’ 拉取，但是未指定一个分支。因为这不是当前分支默认的远程仓库，您必须在命令行中指定一个分支名。”<br>执行以下内容：<br><code>git branch --set-upstream-to corigin/master master</code></p><h2 id="出错时"><a href="#出错时" class="headerlink" title="出错时"></a>出错时</h2><p>出错内容: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to &#39;https:&#x2F;&#x2F;github.com&#x2F;bnq456&#x2F;bnq456.github.io.git&#39;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#39;git pull ...&#39;) before pushing again.</span><br></pre></td></tr></table></figure><ul><li>强制推送<br>在确定自己仓库中的内容低于本地仓库中的内容并且确定本地优于远程时，如果无法进行推送，可以选择强制推送<br><code>git push -u origin master -f</code></li><li>push前先将远程repository修改pull下来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li>若不想merge远程和本地修改，可以先创建新的分支：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch [name]</span><br><span class="line">然后push</span><br><span class="line">git push -u origin [name]</span><br></pre></td></tr></table></figure><h2 id="fetch-和-pull的区别："><a href="#fetch-和-pull的区别：" class="headerlink" title="fetch 和 pull的区别："></a>fetch 和 pull的区别：</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git fetch：将远程主机的最新内容拉取到本地，是否合并由用户决定。</span><br><span class="line">git pull：将远程主机的最新内容拉取到本地后直接合并，可能会产生冲突，需要手动解决。</span><br><span class="line">解决方法：</span><br><span class="line">git reset --hard FETCH_HEAD</span><br><span class="line">git pull</span><br><span class="line">注：将本地的冲突文件冲掉，不仅需要reset到MERGE-HEAD或HEAD，还需要--hard。当后面没有hard，不会冲掉本地工作区，只会冲掉stage区。</span><br></pre></td></tr></table></figure><p><img data-src="/userImages/fetch_and_pull.png" alt="fetch和pull的不同"></p><h1 id="Git中工作环境的临时存储与恢复"><a href="#Git中工作环境的临时存储与恢复" class="headerlink" title="Git中工作环境的临时存储与恢复"></a>Git中工作环境的临时存储与恢复</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash 把当前工作现场存储起来，用于以后恢复现场继续工作</span><br><span class="line">切换回工作时：</span><br><span class="line">git stash list 列出所有存储的工作环境</span><br><span class="line">result: stash@&#123;0&#125;: WIP on dev: cc559a8 add merge</span><br><span class="line">git stash pop 切回工作场景，或git stash apply stash@&#123;0&#125; 恢复后不删除stash中的内容，需要使用git stash drop &lt;name&gt;删除</span><br></pre></td></tr></table></figure><blockquote><p>pop和 apply的区别<br>pop是将工作环境切回后直接删除<br>apply是先应用工作环境，然后存储的工作环境是否删除由用户自己决定。使用：git stash drop <name>进行删除</p></blockquote><blockquote><p>实验性质的代码最好新建分支</p></blockquote><h1 id="分支的创建、删除、合并与推送"><a href="#分支的创建、删除、合并与推送" class="headerlink" title="分支的创建、删除、合并与推送"></a>分支的创建、删除、合并与推送</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branchname&gt;</span><br><span class="line">git checkout &lt;branchname&gt;</span><br><span class="line">以上两条命令等同于git checkout -b &lt;branchname&gt;</span><br><span class="line">git branch -D &lt;name&gt; 表示强行删除一个分支</span><br><span class="line">git merge &lt;branchname&gt; 分支的合并，表示要将&lt;branchname&gt;分支合并到当前分支上</span><br><span class="line"></span><br><span class="line">分支的推送：</span><br><span class="line">master分支是主分支，因此要时刻与远程同步;</span><br><span class="line">dev分支是开发分支，团队所有成员都需要在上面工作，所以需要时刻与远程同步;</span><br><span class="line">bug分支是本地修复bug，可推送可不推送;</span><br><span class="line">feature分支取决与是否在上面进行开发。</span><br></pre></td></tr></table></figure><h1 id="多人协作："><a href="#多人协作：" class="headerlink" title="多人协作："></a>多人协作：</h1><blockquote><p>1、首先，可以试图用git push origin <branch-name>推送自己的修改；</p></blockquote><blockquote><p>2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p></blockquote><blockquote><p>3、如果合并有冲突，则解决冲突，并在本地提交；</p></blockquote><blockquote><p>4、没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！</p></blockquote><blockquote><p>5、如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to <branch-name> origin/<branch-name>。</p></blockquote><h1 id="rebase：（不是很了解）"><a href="#rebase：（不是很了解）" class="headerlink" title="rebase：（不是很了解）"></a>rebase：（不是很了解）</h1><blockquote><p>rebase操作可以将本地未push的分叉提交历史整理成一条直线;<br>rebase的目的是使我们在查看提交的变化时更容易，因为分叉的提交需要三方比较。</p></blockquote><h1 id="git-标签："><a href="#git-标签：" class="headerlink" title="git 标签："></a>git 标签：</h1><p>git tag <name>用于新建一个标签,默认为HEAD，当创建带有说明的标签时，用-a指定标签名，-m指定说明文字<br>git tag可以查看所有的标签<br>当给以前忘记打标签的项目打标签时，可以先找出要打标签项目的编号，然后git tag <tagname> <commit id><br>-d用于删除标签<br>    远程标签推送：<br>    git push origin <tagname>推送一个本地标签到远程<br>    git push origin –tags 将所有标签推送到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当删除远程标签时：</span><br><span class="line">1、首先先删除本地的标签 git tag -d &lt;tagname&gt;</span><br><span class="line">2、然后删除远程的标签 git push origin :refs&#x2F;tags&#x2F;&lt;tagname&gt;或者git push origin --delete tag &lt;tagname&gt;（作用与上两步相同）</span><br></pre></td></tr></table></figure><h1 id="日志文件查询"><a href="#日志文件查询" class="headerlink" title="日志文件查询"></a>日志文件查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git整理：&quot;&gt;&lt;a href=&quot;#git整理：&quot; class=&quot;headerlink&quot; title=&quot;git整理：&quot;&gt;&lt;/a&gt;git整理：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;工作区中的.git目录为Git版本库，git add将文件提交到暂存区,git commit将文件提交到本地仓库，git push将文件提交到远程仓库。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://quiryrain.ml/categories/Git/"/>
    
    
      <category term="学习总结" scheme="https://quiryrain.ml/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Git" scheme="https://quiryrain.ml/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习总结</title>
    <link href="https://quiryrain.ml/190502-1/"/>
    <id>https://quiryrain.ml/190502-1/</id>
    <published>2019-05-02T03:37:44.000Z</published>
    <updated>2020-07-14T00:13:46.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-中的三个基本概念"><a href="#Docker-中的三个基本概念" class="headerlink" title="Docker 中的三个基本概念"></a>Docker 中的三个基本概念</h2><ul><li>镜像(Image)</li><li>容器(Container)</li><li>仓库(Repository)</li></ul><a id="more"></a><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>镜像不包含任何动态数据，其内容在构建之后也不会改变</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>是镜像的运行时实例 - 实际执行时镜像会在内存中变成什么。默认情况下，它完全独立于主机环境运行，仅在配置为访问主机文件和端口的情况下才执行此操作。</p><h2 id="非root用户执行docker"><a href="#非root用户执行docker" class="headerlink" title="非root用户执行docker"></a>非root用户执行docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建docker组，一般是存在的。</span><br><span class="line">sudo groupadd docker</span><br><span class="line">2. 将当前用户添加到docker组</span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line">3. 注销当前登陆用户，从新登陆</span><br><span class="line">4. 验证是否可以行</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyname .<span class="comment"># 使用此目录的 Dockerfile 创建镜像</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 4000:80 friendlyname  <span class="comment"># 运行端口 4000 到 90 的“友好名称”映射</span></span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 4000:80 friendlyname         <span class="comment"># 内容相同，但在分离模式下</span></span></span><br><span class="line">docker ps                                 <span class="comment"># 查看所有正在运行的容器的列表</span></span><br><span class="line">docker stop &lt;hash&gt;                     <span class="comment"># 平稳地停止指定的容器</span></span><br><span class="line">docker ps -a           <span class="comment"># 查看所有容器的列表，甚至包含未运行的容器</span></span><br><span class="line">docker kill &lt;hash&gt;                   <span class="comment"># 强制关闭指定的容器</span></span><br><span class="line">docker rm &lt;hash&gt;              <span class="comment"># 从此机器中删除指定的容器</span></span><br><span class="line">docker rm $(docker ps -a -q)           <span class="comment"># 从此机器中删除所有容器</span></span><br><span class="line">docker images -a                               <span class="comment"># 显示此机器上的所有镜像</span></span><br><span class="line">docker rmi &lt;imagename&gt;            <span class="comment"># 从此机器中删除指定的镜像</span></span><br><span class="line">docker rmi $(docker images -q)             <span class="comment"># 从此机器中删除所有镜像</span></span><br><span class="line">docker login             <span class="comment"># 使用您的 Docker 凭证登录此 CLI 会话</span></span><br><span class="line">docker tag &lt;image&gt; username/repository:tag  <span class="comment"># 标记 &lt;image&gt; 以上传到镜像库</span></span><br><span class="line">docker push username/repository:tag            <span class="comment"># 将已标记的镜像上传到镜像库</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> username/repository:tag                   <span class="comment"># 运行镜像库中的镜像</span></span></span><br><span class="line">docker stack ls              <span class="comment"># 列出此 Docker 主机上所有正在运行的应用</span></span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class="comment"># 运行指定的 Compose 文件</span></span><br><span class="line">docker stack services &lt;appname&gt;       <span class="comment"># 列出与应用关联的服务</span></span><br><span class="line">docker stack ps &lt;appname&gt;   <span class="comment"># 列出与应用关联的正在运行的容器</span></span><br><span class="line">docker stack rm &lt;appname&gt;                             <span class="comment"># 清除应用</span></span><br><span class="line">docker-machine create --driver virtualbox myvm1 <span class="comment"># 创建 VM（Mac、Win7、Linux）</span></span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">"myswitch"</span> myvm1 <span class="comment"># Win10</span></span><br><span class="line">docker-machine <span class="keyword">env</span> myvm1                <span class="comment"># 查看有关节点的基本信息</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker node ls"</span>         <span class="comment"># 列出 swarm 中的节点</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker node inspect &lt;node ID&gt;"</span>        <span class="comment"># 检查节点</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm join-token -q worker"</span>   <span class="comment"># 查看加入令牌</span></span><br><span class="line">docker-machine ssh myvm1   <span class="comment"># 打开与 VM 的 SSH 会话；输入“exit”以结束会话</span></span><br><span class="line">docker-machine ssh myvm2 <span class="string">"docker swarm leave"</span>  <span class="comment"># 使工作节点退出 swarm</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker swarm leave -f"</span> <span class="comment"># 使主节点退出，终止 swarm</span></span><br><span class="line">docker-machine start myvm1            <span class="comment"># 启动当前未运行的 VM</span></span><br><span class="line">docker-machine stop $(docker-machine ls -q)               <span class="comment"># 停止所有正在运行的 VM</span></span><br><span class="line">docker-machine rm $(docker-machine ls -q) <span class="comment"># 删除所有 VM 及其磁盘镜像</span></span><br><span class="line">docker-machine scp docker-compose.yml myvm1:~     <span class="comment"># 将文件复制到节点的主目录</span></span><br><span class="line">docker-machine ssh myvm1 <span class="string">"docker stack deploy -c &lt;file&gt; &lt;app&gt;"</span>   <span class="comment"># 部署应用</span></span><br></pre></td></tr></table></figure><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker save -o &lt;localfilename&gt; &lt;flename&gt; <span class="comment">#导出镜像到本地文件</span></span><br><span class="line">docker load --input &lt;filename&gt; <span class="comment">#从导出的本地文件中再导入到本地镜像库</span></span><br><span class="line">docker load &lt; &lt;filename&gt; <span class="comment">#同上，导入镜像以及其相关的元数据信息(包括标签等)(生成镜像文件)</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d ... <span class="comment"># 使docker容器在后台以守护态形式运行</span></span></span><br><span class="line">docker export &lt;container id&gt; &gt; &lt;localfilename&gt; <span class="comment"># 将本地的某个容器导出</span></span><br><span class="line">docker import - &lt;repository:tag&gt; <span class="comment"># 将容器快照文件导入为镜像 (生成镜像快照)</span></span><br><span class="line">docker load 和 docker import 的区别：</span><br><span class="line">  docker import 将丢弃所有的历史记录和元数据信息(仅保存容器当时的快照状态)，</span><br><span class="line">  docker load 将保存完整记录，体积较大</span><br><span class="line">  docker import 导入时可以重新指定标签等元数据信息</span><br><span class="line">docker image ls --digests <span class="comment"># 列出所有镜像的摘要</span></span><br><span class="line">docker image rm &lt;id、repository:tag&gt; <span class="comment"># 删除镜像，在通过id删除时，可以指定前3个字符以上，但是要能足够用于区分别的镜像</span></span><br><span class="line">docker image rm &lt;digest&gt; <span class="comment"># 精确删除</span></span><br></pre></td></tr></table></figure><p><em>Union FS 是有最大层数限制的,比如 AUFS，一个镜像不能超过127层</em></p><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><p>仓库名、标签均为<code>&lt;none&gt;</code>的镜像，被称为虚悬镜像</p><p>显示虚悬镜像：<code>docker image ls -f dangling=true</code></p><p>删除虚悬镜像：<code>docker image prune</code></p><h2 id="docker-中的过滤器"><a href="#docker-中的过滤器" class="headerlink" title="docker 中的过滤器"></a>docker 中的过滤器</h2><p>在docker image ls还支持使用过滤器参数 –filter或-f</p><ul><li>since 在某个镜像之后建立的镜像</li><li>before在某个镜像之前建立的镜像</li><li>dangling未打开标签</li></ul><p>镜像是多层存储,每一层是在前一层的基础上进行的修改;而容器同样也是多层存储,是在以镜像为基础层,在其基础上加一层作为容器运行时的存储层。</p><p>镜像的定制实际上就是定制每一层所添加的配置、文件.</p><p>在构建Dockerfile时，如果使用了scratch为基础镜像，意味着不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始，这样减少了镜像体积。</p><h2 id="从标准输入中读取Dockerfile"><a href="#从标准输入中读取Dockerfile" class="headerlink" title="从标准输入中读取Dockerfile"></a>从标准输入中读取Dockerfile</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br><span class="line">或</span><br><span class="line">cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure><p>如果标准输入传入的是文本文件，则将其视为<code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取Dockerfile的内容，它没有上下文，因此不以像其他方法那样将文本文件<code>Copy</code>进镜像之类的事情</p><h2 id="ADD中更高级的复制文件"><a href="#ADD中更高级的复制文件" class="headerlink" title="ADD中更高级的复制文件"></a>ADD中更高级的复制文件</h2><p>ADD指令将会自动解压缩这个压缩文件到&lt;目标路径&gt;</p><h2 id="COPY和ADD指令选择时遵循的原则"><a href="#COPY和ADD指令选择时遵循的原则" class="headerlink" title="COPY和ADD指令选择时遵循的原则"></a>COPY和ADD指令选择时遵循的原则</h2><p>所有文件复制均使用COPY指令,仅在需要自动解压缩的场合使用ADD</p><p>Docker 不是虚拟机,容器中的应用都应该以前台执行,而不是像虚拟机、物理机里面那样,用upstart/systemd 去启动后台服务,容器内没有后台服务的概念。<br>启动程序就是容器应用进程,容器就是为了主进程而存在的,主进程退出,容器就失去了存在的意义。<br>当使用ENTRYPOINT后，CMD的内容将会作为参数传给ENTRYPOINT。</p><p><code>EXPOSE</code>指令是声明运行时容器提供的服务端口</p><p><code>WORKDIR</code>可以来指定工作目录(或者称为当前目录)，以后各层的当前目录就被改为指定的目录，如果目录不存在，WORKDIR自动创建目录。</p><p><code>USER</code>和<code>WORKDIR</code>都是改变环境状态并影响以后的层。<code>WORKDIR</code>是改变工作目录，<code>USER</code>则是改变之后层的执行<code>RUN</code>、<code>CMD</code>以及<code>ENTRYPOINT</code>这类命令的身份。</p><p><code>HEALTHCHECK</code>支持下列选项:</p><ul><li>–interval=&lt;间隔&gt; :两次健康检查的间隔,默认为 30 秒;</li><li>–timeout=&lt;时长&gt; :健康检查命令运行超时时间,如果超过这个时间,本次健康检查就被视为失败,默认 30 秒;</li><li>–retries=&lt;次数&gt; :当连续失败指定次数后,则将容器状态视为<em>unhealthy</em>,默认3次。</li></ul><p><em><code>CMD</code>、<code>ENTRYPOINT</code>、<code>HEALTHCHECK</code>三者的共同点：在Dockerfile文件中只可以出现一次，如果出现多次，只有最后一个生效。</em></p><h2 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker export container_id &gt; export_filename.tar</span><br><span class="line"></span><br><span class="line">cat export_filename.tar | docker import - repository:tag</span><br></pre></td></tr></table></figure><p>此处利用了Linux中的管道，将一个镜像文件从一台机器迁移到另一台机器</p><h2 id="docker-attach和docker-exec的区别"><a href="#docker-attach和docker-exec的区别" class="headerlink" title="docker attach和docker exec的区别"></a>docker attach和docker exec的区别</h2><p>相同点：</p><ul><li>两者都可以使用-d、-i参数，在同时使用这两个参数时，都是进入bash</li><li>-i参数是没有分配伪终端，但命令执行结果仍然返回</li></ul><p>不同点：</p><ul><li>在使用attach进入伪终端，输入exit退出时，会导致容器的停止</li><li>exec进入终端，输入exit退出时，不会导致容器的停止</li></ul><h2 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container rm 容器名称</span><br><span class="line">docker container prune <span class="comment"># 清理所有处于终止状态的容器</span></span><br></pre></td></tr></table></figure><p>如果要删除一个运行中的容器,可以添加-f参数。Docker 会发送SIGKILL信号给容器。</p><h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p>在容器中管理数据主要有两种方式：</p><ul><li>数据卷(Volumes)</li><li>挂载主机目录(Bind mounts)</li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过UFS，可以提供很多有用的特性：</p><ul><li>数据卷可以在同期之间共享和重用</li><li>对数据卷的修改会立即生效</li><li>对数据卷的更新，不会影响镜像</li><li>数据卷默认一直存在，即使容器被删除</li></ul><h3 id="数据卷操作命令"><a href="#数据卷操作命令" class="headerlink" title="数据卷操作命令"></a>数据卷操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker volume create &lt;volumename&gt; # 创建一个数据卷</span><br><span class="line">docker volume ls # 查看所有数据卷</span><br><span class="line">docker inspect &lt;contrainer name&gt; # 查看容器的信息</span><br><span class="line">docker volume rm &lt;volumename&gt; # 删除数据卷</span><br></pre></td></tr></table></figure><p>在用docker run命令的时候，使用 –mount标记来将数据卷挂载到容器里，在一次docker run中可以挂载多个数据卷。</p><p>数据卷是被设计用来持久化数据的，它的声明周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收机制。</p><h3 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h3><p>在容器中运行一个网络应用，要让外部也可以访问这些应用，可以通过-P或-p参数来执行端口映射</p><p>在使用<code>-P</code>标记时，Docker会随机映射一个<code>49000~49900</code>的端口到内部容器开放的网络端口。</p><h2 id="Compose中的两个重要概念"><a href="#Compose中的两个重要概念" class="headerlink" title="Compose中的两个重要概念"></a>Compose中的两个重要概念</h2><ul><li>服务（service）：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目（project）：由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li></ul><h2 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h2><p>命令选项</p><ul><li>-f, –file FILE 指定使用的 Compose 模板文件,默认为<code>docker-compose.yml</code>,可以多次指定。</li><li>-p, –project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。</li><li>–x-networking 使用Docker的可拔插网络后端特性</li><li>–x-network-driver DRIVER 指定网络后端的驱动，默认为<code>bridge</code></li><li>–verbose 输出更多调试信息</li><li>-v, –version打印版本并退出</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-中的三个基本概念&quot;&gt;&lt;a href=&quot;#Docker-中的三个基本概念&quot; class=&quot;headerlink&quot; title=&quot;Docker 中的三个基本概念&quot;&gt;&lt;/a&gt;Docker 中的三个基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;镜像(Image)&lt;/li&gt;
&lt;li&gt;容器(Container)&lt;/li&gt;
&lt;li&gt;仓库(Repository)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://quiryrain.ml/categories/Docker/"/>
    
    
      <category term="学习总结" scheme="https://quiryrain.ml/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Docker" scheme="https://quiryrain.ml/tags/Docker/"/>
    
  </entry>
  
</feed>
